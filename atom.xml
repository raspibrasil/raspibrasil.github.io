<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Raspberry Pi Brasil</title>
    <link href="https://raspibrasil.github.io/atom.xml" rel="self" />
    <link href="https://raspibrasil.github.io/" />
    <updated>2025-02-04T20:10:45.355703Z</updated>
    <author>
        <name>Equipe Raspberry Pi Brasil - @raspibrasil@qoto.org</name>
    </author>
    <id>urn:uuid:3b25749c-8528-33b2-9fb6-e1f02633295f</id>
    
    <entry>
        <title>Acesse seu Raspberry Pi remotamente de forma segura com chaves via SSH</title>
        <link href="https://raspibrasil.github.io/blog/acesso_remoto_seguro_raspberrypi_ssh/" />
        <id>urn:uuid:70d29870-e6bc-5c69-a780-2eaaacd25115</id>
        <updated>2025-02-04T13:53:35.300873Z</updated>
        <content type="xhtml">
            <div xmlns="http://www.w3.org/1999/xhtml">
                <h1>Acesse seu Raspberry Pi remotamente de forma segura com chaves via SSH</h1>
<p>Um dos pontos fortes do Raspberry Pi é a sua versatilidade quando se trata de computação. Graças à sua crescente capacidade e recursos, é possível utilizar versões mais recentes como o <a href="https://amzn.to/3wfUopM">Raspberry Pi 4</a> como um <a href="/blog/raspberry_pi_como_desktop/">computador Desktop completo</a>, mas seu uso como um servidor também continua como uma de suas <a href="/blog/como_escolher_seu_raspberry_pi/">formas de utilização principais</a>. Um servidor nada mais é do que um computador que provém serviços e com o qual trabalhamos remotamente, através da rede. Com o seu baixo consumo de energia, o Raspberry Pi é um candidato perfeito para este uso.</p>
<p>O desafio de se trabalhar remotamente com computadores é garantir a conexão à eles. É preciso garantir que os comandos e dados sejam transmitidos com sucesso, e com segurança para que não sejam obstruidos ou manipulados por fatores externos, especialmente quando transmitidos pela internet. Felizmente, todos estes problemas estão cobertos através de uma ferramenta chamada <a href="https://en.wikipedia.org/wiki/Secure_Shell_Protocol">SSH</a> ou <em>Secure Shell</em>, que garante a transmissão e transmissão dos dados entre os dois computadores. O SSH é a ferramenta ideal para trabalhar com o Raspberry Pi à distância, e embora venha já habilitado por padrão, é necessário configurá-lo para providenciar segurança e conveniência adicionais.</p>
<p>Vejamos neste post como.</p>
<h2>Como funciona o SSH?</h2>
<p>O SSH é um protocolo que acrescenta <strong>criptografia</strong> à conexão entre dois computadores. De maneira simplificada, os dados são criptografados (embaralhados por uma chave secreta) antes de serem transmitidos, e ao serem recebidos, são desembaralhados pelo destinatário. </p>
<p>Esta criptografia segue um modelo chamado de <a href="https://en.wikipedia.org/wiki/Public-key_cryptography"><em>Public-key Cryptography</em></a> ou criptografia assimétrica que envolve um par de chaves criptográficas entre dois atores, as quais são responsáveis por embaralhar e desembaralhar o conteúdo. Há a chave <em>privada</em> que deve ser mantida em segurança e a chave <em>pública</em> que pode ser compartilhada com outros que desejam se comunicar.</p>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/Public_key_encryption.svg/525px-Public_key_encryption.svg.png" alt="como funciona a criptografia assimétrica" />
    <figcaption>
        A criptografia assimétrica utiliza uma chave pública para criptografar conteúdo e uma chave privada para descriptografá-lo, tornando possível a comunicação privada. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Qualquer sistema operacional que possua o SSH habilitado produz seu próprio par de chaves para participar do protocolo, incluindo o <a href="/blog/como_instalar_linux_raspberry_pi/">Raspberry Pi OS</a> que o possui habilitado por padrão. Portanto, para acessar seu Raspberry Pi na sua rede local uma vez que ligado e conectado, basta usar o seguinte comando:</p>
<pre><code>ssh usuario@endereçoip
</code></pre>
<p>Onde <code>usuario</code> é o nome do seu usuário no Raspberry Pi (por padrão, <code>pi</code> no Raspberry Pi OS) e <code>endereçoip</code> é o seu endereço IP da rede local. Você pode descobrir este endereço olhando os dispositivos conectados na página de administração do seu roteador, similarmente à forma de realizar o <a href="/blog/tornando_seu_raspberry_pi_visivel_internet/">Port Forwarding</a>.</p>
<p>Ao executar este comando, você verá uma mensagem perguntando se você confirma a identidade do computador remoto. Como você está na rede local, e é a sua primeira vez conectando ao Pi, não há risco em aceitar. Digite a senha do seu usuário no Raspberry Pi e você terá acesso remoto seguro via SSH como se estivesse trabalhando localmente.</p>
<p>Em relação ao acesso, o guia termina aqui. Porém, há alguns problemas relacionados com a utilização de senhas. O primeiro problema é que senhas podem ser vazadas ou - pior - adivinhadas por um adversário determinado. Uma vez comprometida, não há como garantir a segurança da sua conexão via senha apenas. Além disso, senhas precisam ser digitadas a cada utilização, o que pode se tornar cansativo dependendo do tipo de trabalho realizado.</p>
<p>Felizmente, há uma solução para ambos estes problemas: <em>autenticação por chaves criptográficas</em>. Esta é uma das melhores práticas na utilização do SSH, e pode ser facilmente implementada no Raspberry Pi como veremos a seguir.</p>
<h2>Habilitando e utilizando autenticação por chaves (passwordless)</h2>
<p>Na autenticação por chaves, o computador local utiliza a sua chave privada para autenticar com sua chave pública armazenada no computador remoto, de maneira similar à criptografia assimétrica. Para utilizá-la, primeiro precisamos primeiro criar nosso par de chaves em nosso computador local. Assumiremos aqui a utilização do Linux também.</p>
<p>A suíte de software do SSH inclui utilidades para gerar e gerenciar chaves públicas e privadas. Podemos gerá-las com o seguinte comando:</p>
<pre><code>ssh-keygen -t ed25519
</code></pre>
<p>Siga as instruções da tela e especifique <code>mykey</code> como o nome do seu arquivo quando solicitado. A opção <code>ed25519</code> especifica o tipo de chave a ser utilizada, e este algoritmo é o mais recente e considerado mais seguro do que as outras opções como RSA e ECDSA, baseada em criptografia elíptica.</p>
<p>Este comando criará dois arquivos, <code>mykey</code> e <code>mykey.pub</code> correspondendo respectivamente às suas chaves privada e pública. Para protegê-las, arrange-as dentro de um diretório seguro chamado <code>.ssh</code> dentro do seu diretório home, que é de praxe do SSH:</p>
<pre><code>mkdir $HOME/.ssh
chmod 700 $HOME/.ssh # limite o acesso apenas à você
mv mykey mykey.pub $HOME/.ssh
</code></pre>
<p>Com estas chaves em mãos, precisamos agora configurar o Raspberry Pi para aceitar nossa chave como forma de autenticação. Para isso, copie a sua chave <em>pública</em> para o seu Raspberry Pi com o <code>scp</code>, que copia arquivos via SSH:</p>
<pre><code>scp $HOME/.ssh/mykey.pub usuario@enderecoip:/home/usuario/.ssh/ # envie a chave PÚBLICA
</code></pre>
<p>Digite sua senha para confirmar. Após a transferência, acesse o Raspberry Pi e adicione a chave para as chaves confiadas:</p>
<pre><code>cat mykey.pub  &gt;&gt; .ssh/authorized_keys
</code></pre>
<blockquote>
<p>Observação: você pode adicionar o acesso de computadores adicionais (mesmos usuários ou não) simplesmente repetindo este processo até agora.</p>
</blockquote>
<p>Agora você poderá acessar seu Pi sem precisar de senha através do comando:</p>
<pre><code>ssh -i $HOME/.ssh/mykey usuario@enderecoip # note que é a chave privada agora
</code></pre>
<blockquote>
<p>Aviso: sua chave privada agora é como a sua senha. Proteja-a e armazene-a num backup seguro para evitar problemas de acesso futuros.</p>
</blockquote>
<h2>Automatizando o processo</h2>
<p>O comando anterior, embora bem mais rápido que via senha, ainda continua um pouco maçante e comprido. Podemos ainda melhorá-lo e diminuir a necessidade de digitação através da elaboração do arquivo de configuração do SSH. Para facilitar este acesso, crie o arquivo <code>$HOME/.ssh/config</code> no seu computador local e insira o seguinte conteúdo nele:</p>
<pre><code>Host meuraspberrypi:
    Hostname enderecoip
    User usuario
    IdentityFile $HOME/.ssh/mykey
</code></pre>
<p>Agora você pode rapidamente acessar o seu Raspberry Pi da seguinte forma:</p>
<pre><code>ssh meuraspberrypi
</code></pre>
<p>Muito mais rápido, prático e seguro que a utilização de senhas!</p>
<h2>Pontos de segurança adicionais na internet</h2>
<p>Ao passo que a utilização do Raspberry Pi na sua rede caseira local tipicamente não precisa de medidas adicionais de segurança, um dispositivo com <a href="/blog/tornando_seu_raspberry_pi_visivel_internet/">livre acesso à internet</a> requer mais atenção em relação à segurança - especialmente num serviço de autenticação como o SSH.</p>
<p>A primeira recomendação é que, uma vez que o acesso via chaves for habilitado, <strong>desabilite a autenticação remota por via de senhas</strong>. Desta forma, você reduz a chance que algum adversário ganhe acesso ao seu sistema <em>mesmo sabendo a sua senha</em>. Para isso, edite o arquivo <code>/etc/sshd_config</code> no seu Raspberry Pi e adicione a seguinte linha:</p>
<pre><code>PasswordAuthentication no # se estiver "yes" basta trocar para "no"
</code></pre>
<p>A segunda recomendação é <strong>trocar a porta do seu serviço SSH</strong>, que por padrão é disponibilizado na porta 22. Muitos scanners automáticos maliciosos na internet procuram por esta porta padrão de serviços, e trocá-la por outra porta aleatória pode adicionar mais segurança. Ainda no Raspberry Pi, edite esta linha (que provavelmente estará comentada):</p>
<pre><code>Port 12345 # troque 12345 para um número aleatório que só você sabe!
</code></pre>
<p>Agora reinicie o serviço do SSH no Raspberry Pi:</p>
<pre><code>sudo systemctl restart sshd
</code></pre>
<p>Como a porta de serviços mudou, você deve editar sua configuração local para refletí-la:</p>
<pre><code>Host meuraspberrypi:
    Hostname enderecoip
    User usuario
    IdentityFile $HOME/.ssh/mykey
    Port 12345 # &lt;-- coloque aqui o seu número escolhido
</code></pre>
<p>Após esta atualização, você poderá acessá-lo via <code>ssh meuraspberrypi</code> novamente.</p>
<h2>Outras possibilidades com o SSH</h2>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/f/fb/FTP_model.png" alt="diagrama do FTP" />
    <figcaption>
        Utilizando SSH, é possível assegurar o antiquado FTP para torná-lo seguro de forma bem fácil. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Como o SSH providencia apenas uma camada segura de comunicação, é possível utilizá-lo em conjunto com outros protocolos ou aplicações sinergisticamente.</p>
<p>Uma das aplicações mais populares desta combinação é o <a href="https://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol"><strong>SFTP</strong></a> (Secure File Transfer Protocol) que combina a autenticação do SSH para transferir arquivos de maneira segura entre dois computadores. </p>
<p>O SFTP corrige falhas de segurança presentes no antigo FTP sem a necessidade de utilização de certificados externos, e pode ser completamente automatizada graças à autenticação via chaves. Falaremos mais sobre este excelente serviço num post futuro.</p>
<p>Outra aplicação é o roteamento das conexões do seu computador usando um computador remoto como proxy e assegurando-a via SSH. Este é um conceito chamado <strong>proxy-chaining</strong> e pode servir como uma maneira simples de circunvir censura de rede (exemplo: filtros de internet em escolas e escritórios) e providenciar um pouco mais de privacidade.</p>
<hr />
<p>Você já utilizava o SSH para acessar seu Raspberry Pi antes de ler este arquivo? Como configura o acesso remoto a ele? Compartilhe conosco no <a href="https://qoto.org/@raspibrasil">Mastodon!</a></p>
            </div>
        </content>
    </entry>

    <entry>
        <title>Acessando o Raspberry Pi fora de casa via Tor</title>
        <link href="https://raspibrasil.github.io/blog/acesso_remoto_tor/" />
        <id>urn:uuid:d03ba547-25e1-5820-b26b-bae51dcbcdf3</id>
        <updated>2025-02-04T13:53:35.300873Z</updated>
        <content type="xhtml">
            <div xmlns="http://www.w3.org/1999/xhtml">
                <h1>Acessando o Raspberry Pi fora de casa via Tor</h1>
<p>Usar o Raspberry Pi como um servidor é forma extremamente conveniente e simples de aprender a utilizar o <a href="/blog/bem_vindo_ao_raspberrypi_brasil/">software livre</a>. Com seu baixo consumo de energia, hardware e armazenamento baratos, e baixa necessidade de arrefecimento, modelos como o <a href="https://amzn.to/3qlUOqH">Raspberry Pi 3</a> funcionam como ótimos servidores de pequeno a médio porte na sua rede caseira. Quando queremos acessá-lo de fora da nossa rede caseira, geralmente podemos fazê-lo através de uma técnica chamada <a href="/blog/tornando_seu_raspberry_pi_visivel_internet/">Port Forwarding</a>, que envolve colocar o Raspberry Pi numa posição privilegiada na rede e ser enxergado da própria internet. </p>
<p>Porém, algumas vezes esta combinação pode não ser completamente possível, por conta de fatores associados ao seu roteador ou até mesmo se o seu provedor de internet não expõe endereços individuais na internet. Quando isto acontece, felizmente ainda temos uma alternativa para acessar nossos arquivos remotamente: a rede <a href="https://torproject.org">Tor</a>. Famosa (ou infame) por proporcionar privacidade e anonimato nas atividades da internet, há um uso menos conhecido do Tor que permite você acessar um computador atrás de um roteador através de uma ferramenta chamada <em>Hidden Services</em>. Vejamos como fazer isso neste post.</p>
<h2>Como os Tor Hidden Services funcionam</h2>
<p>O Tor foi criado em 2002 pela Marinha Americana como uma forma de se anonimizar tráfego na internet e dificultar sua análise. Desde sua concepção, o projeto primeiramente foca na proteção da privacidade dos usuários, a qual é alcançada através da utilização de três camadas criptografadas de tráfego, que tornam virtualmente impossível qualquer ponto na rede de descobrir quem está acessando o quê.</p>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/d/dc/Tor-onion-network.png" alt="Descrição de como a rede Tor funciona" />
    <figcaption>
        O Tor anonimiza a sua conexão com a internet fazendo-a passar por três "pontos intermediários," que impossibilitam identificar quem está falando com quem. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Com o tempo, o Tor Project expandiu o seu escopo para incluir também a funcionalidade <em>Hidden Service</em> que permite você hospedar um site ou serviço dentro do Tor sem ser possível identificar quem são os seus visitantes, e nem seus visitantes quem você é. Esta implementação é bastante controversa, pois pode habilitar alguém a hospedar conteúdo de legalidade duvidosa, mas vem com outra ótima função: se tornar acessível mesmo atrás de um firewall ou roteador.</p>
<p>Por esta razão, podemos utilizar Hidden Services como uma forma de acesso remoto da internet ao nosso Raspberry Pi de forma segura combinando-o com o <a href="/blog/acesso_remoto_seguro_raspberrypi_ssh/">Protocolo SSH</a>. Assim, caso não seja possível acessar o seu Raspberry Pi via port forwarding, podemos ainda acessá-lo provado que: </p>
<ol>
<li>Ele possua alguma conexão à internet.</li>
<li>O sistema Tor e o SSH estejam instalados e operando nele. </li>
<li>O seu dispositivo cliente também possua Tor instalado. </li>
</ol>
<p>Trataremos a seguir sobre os pontos #2 e #3. </p>
<h2>Criando um Hidden Service de SSH no Raspberry Pi</h2>
<p>Um Hidden Service nada mais é do que um serviço disponibilizado através da rede Tor. Você em teoria pode criar um Hidden Service para qualquer serviço do Linux, embora os mais comuns sejam <a href="/blog/hospedando_seu_site_raspberry_pi/">Servidor Web</a> ou <a href="/blog/acesso_remoto_seguro_raspberrypi_ssh/">SSH</a>. E enquanto serviços na internet costumam utilizar domínios da internet (.com, .net, etc), Hidden Services utilizam endereços <code>.onion</code>, que são gerados de maneira aleatória. </p>
<p>Como o SSH já vem habilitado por padrão no <a href="/blog/como_instalar_linux_raspberry_pi/">Raspberry Pi OS</a>, para hospedar o serviço SSH como Hidden Service no Raspberry Pi, primeiro instale o Tor com o seguinte comando: </p>
<pre><code>sudo apt-get install tor
</code></pre>
<p>O Tor é instalado e iniciado automaticamente. Na sua configuração padrão, o Tor atende bem os requerimentos de anonimato como um cliente, mas se você precisa hospedar serviços com ele, precisa de configurações adicionais. Vamos editá-lo para adicionar um Hidden Service rodando o SSH. Adicione as seguintes linhas ao arquivo de configuração central do Tor: <code>/etc/tor/torrc</code>:</p>
<pre><code>HiddenServiceDir /var/lib/tor/ssh
HiddenServicePort 22 127.0.0.1:22
# assumindo que SSH está na porta 22
</code></pre>
<p>Salve o arquivo e reinicie o Tor com o seguinte comando:</p>
<pre><code>sudo systemctl restart tor
</code></pre>
<p>Ao reiniciar, o Tor irá criar um diretório com informações específicas para o seu novo Hidden Service do SSH localizado em <code>/var/lib/tor/ssh</code> (conforme criado acima), acessível somente pelo usuário root por conta da segurança. Ao passo que você não precisará editar nenhum outro arquivo de configuração, o arquivo <code>hostname</code> dentro deste diretório contém o endereço <code>.onion</code> do seu Hidden Service, do qual você precisará para acessá-lo remotamente. Um endereço .onion de exemplo poderia ser:</p>
<pre><code>$ sudo cat /var/lib/tor/ssh/hostname
abcdefabcdefabcdefabcdefabcdefabcdefabcdef.onion
</code></pre>
<p>Guarde este endereço em algum lugar, pois você precisará-dele para configurar o dispositivo cliente.</p>
<h2>Acessando o SSH via Tor no seu dispositivo</h2>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Onion_diagram.svg/500px-Onion_diagram.svg.png" alt="Onion Routing explicado" />
    <figcaption>
        O princípio do Onion Routing consiste em "encapar" uma mensagem com três chaves distintas para que ninguém exceto o destinatário possa vê-la. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Já andamos metade do caminho configurando o servidor, mas igualmente necessário é configurar o seu dispositivo cliente para também utilizar o Tor para identificar e acessar o seu Raspberry Pi. Assumiremos aqui que você está utilizando Linux no dispositivo cliente.</p>
<p>Conforme especificamos nos requerimentos acima, você também deverá instalar o Tor no seu dispositivo para acessar um Hidden Service, e adicionalmente um programa chamado <code>netcat</code> que fará o roteamento da conexão SSH pela rede Tor. Utilizando Ubuntu ou Debian, o comando para instalar é:</p>
<pre><code>sudo apt-get install netcat
</code></pre>
<p>Edite o arquivo de configuração <code>~/.ssh/config</code> e adicione uma nova entrada para o seu Hidden Service:</p>
<pre><code>Host meuraspi-tor
    # use o hostname que obteve do raspberry pi anteriormente
    Hostname abcdefabcdefabcdefabcdefabcdefabcdefabcdef.onion 
    User nomedeusuario
    ProxyCommand netcat --proxy 127.0.0.1:9050 --proxy-type socks5 %h %p
</code></pre>
<blockquote>
<p>Dica: se você já possui um host SSH habilitado, é de praxe criar sua "versão torificada" simplesmente adicionando <code>-tor</code> no campo <em>Host</em>. Por exemplo, se o seu Raspberry Pi internamente é o Host <code>raspi</code>, seu acesso via Tor seria <code>raspi-tor</code>.</p>
</blockquote>
<p>Adicionalmente, se você <a href="/blog/acesso_remoto_seguro_raspberrypi_ssh/">configurou seu SSH para utilizar chaves</a> ao invés de senhas na autenticação, deve especificar a localização delas novamente:</p>
<pre><code>Host meuraspi-tor
    Hostname abcdefabcdefabcdefabcdefabcdefabcdefabcdef.onion 
    User nomedeusuario
    # especifique a localização da chave privada:
    IdentityFile /home/usuario/.ssh/minhachave
    ProxyCommand netcat --proxy 127.0.0.1:9050 --proxy-type socks5 %h %p
</code></pre>
<p>Salve o arquivo, e teste a conexão com o comando:</p>
<pre><code>ssh meuraspi-tor
</code></pre>
<p>Note que, por conta da utilização do Tor e o roteamento por vários hosts, a velocidade da conexão é reduzida drasticamente. O SSH irá perguntar se você reconhece o fingerprint por conta dele ser um host novo. Se você enxerga o seu login do Raspberry Pi com sucesso, parabéns: o seu Hidden Service foi configurado corretamente, e está disponível além da sua rede caseira.</p>
<h2>Prós e contras de um Hidden Service no Raspberry Pi</h2>
<p>Embora prático e simples de se implementar, nem tudo são flores com os Hidden Services. Embora sua maior vantagem seja a privacidade adicional e o acesso independente de firewall ou NAT, eles possuem duas grandes limitações:</p>
<ul>
<li>O serviço precisa rodar sobre a rede Tor, reduzindo significantemente sua velocidade. Para comparação, imagine a redução da velocidade da sua conexão através de uma VPN. No caso do Tor, é como se você passasse por <em>três</em> VPNs para o mesmo destino. Este é o custo do anonimato.</li>
<li>Algumas redes, especialmente as corporativas, bloqueiam o uso do Tor dentro delas alegando risco de segurança. É possível ainda utilizá-lo através de soluções do próprio Tor, como <em>Bridges</em> ou <em>Pluggable Transports</em>, mas requerem mais esforço para serem implementados. É mais fácil simplesmente evitar seu uso.</li>
</ul>
<p>Uma grande vantagem, porém, é a segurança adicional que é providenciada ao seu próprio Raspberry Pi: como você não o disponibiliza diretamente na internet, não há risco adicional que scanners e adversários encontrem seu Raspberry Pi e tentem atacá-lo.</p>
<h2>Bônus: acessando seu Raspberry Pi do seu smartphone</h2>
<p>Não há como se tornar mais móvel hoje em dia do que através de um smartphone e conexão 4G e, dependendo da sua rotina, é provável que você passe mais tempo na rua do que com acesso a um computador. Há como acessar seu Raspberry Pi desta forma?</p>
<p>Incrivelmente, <strong>sim!</strong> Mas, por enquanto, apenas no Android...</p>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d8/Screenshot_from_termux.png/337px-Screenshot_from_termux.png" alt="screenshot do Termux" />
    <figcaption>
        O aplicativo Termux rodando no Android. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Graças a um aplicativo Android chamado <a href="https://termux.com/">Termux</a>, você pode ter acesso a um verdadeiro <em>shell</em> Linux no seu próprio celular. É possível instalar software do Linux dentro do aplicativo, incluindo o SSH e o Tor. Combinando os dois e os configurando como nos exemplos acima, é possível acessá-lo da mesma maneira do que num desktop. </p>
<p>Nós descobrimos o Termux relativamente recentemente, mas desde então ele facilmente se tornou nosso aplicativo favorito, e o altamente recomendamos. Se você tem mais interesse em conhecer este aplicativo, escrevemos <a href="/blog/usando_linux_smartphone_termux/">um post mais detalhado de como podemos utilizá-lo a fundo</a>. Confira!</p>
<hr />
<p>Você utilizou hidden services ou o Tor antes? Já conhecia esta utilização para acesso remoto? Escreva para nós no <a href="https://qoto.org/@kzimmermann">Mastodon!</a></p>
            </div>
        </content>
    </entry>

    <entry>
        <title>Hello World! O que é o Raspberry Pi e o Software livre?</title>
        <link href="https://raspibrasil.github.io/blog/bem_vindo_ao_raspberrypi_brasil/" />
        <id>urn:uuid:b1a6952b-c54a-5247-915b-f80e0e7f40b3</id>
        <updated>2025-02-04T13:53:35.300873Z</updated>
        <content type="xhtml">
            <div xmlns="http://www.w3.org/1999/xhtml">
                <h1>Hello World! O que é o Raspberry Pi e o Software livre?</h1>
<p><code>Hello world!</code></p>
<p>Somos a comunidade brasileira do Software Livre e dos <em>single board computers</em> como o Raspberry Pi. Neste blog, buscamos explorar e reportar todas as notícias sobre a computação de porte pequeno e de baixo consumo de energia, e sobre como o <a href="https://www.gnu.org/philosophy/free-sw.en.html">Software Livre</a> como o GNU/Linux pode expandí-lo para obter qualquer solução que você precisar.</p>
<p>Embora alguns estejam familiarizados com estes termos, iniciantes podem se confundir com alguns dos termos que utilizamos aqui. Este post inicial servirá como clarificação e explicação inicial sobre todos os termos mais técnicos que aqui utilizamos. Venha conosco aprender mais!</p>
<h2>O que é o Raspberry Pi? Como ele difere de um computador tradicional?</h2>
<p>O Raspberry Pi é um tipo de <em>single board computer</em> (<a href="https://pt.wikipedia.org/wiki/Computador_de_placa_%C3%BAnica">computador de placa única</a>, no Português) - ou SBC - desenvolvido pela <a href="https://www.raspberrypi.org/">Raspberry Pi Foundation</a> na Inglaterra. O propósito principal do projeto desde sua concepção em 2012 foi de instruir e educar pessoas sobre a ciência da computação através de um computador financeiramente acessível e altamente configurável.</p>
<p>Como todo SBC, o Raspberry Pi é um computador completo construído numa única placa de silicone com todos os componentes - ex: CPU, Placa de Vídeo, saídas USB, placa de rede e adaptador WiFi - estão disponíveis no mesmo espaço compacto, que geralmente pode ser colocado facilmente numa <a href="https://amzn.to/2WD8h0I">caixinha protetora</a>. Acompanhado de uma fonte DC 5V -  equivalente a um carregador de smartphone Android comum - e periféricos como mouse e teclado USB e um monitor HDMI, um Raspberry Pi funciona perfeitamente como um pequeno computador desktop.</p>
<p><img alt="Utilizando um raspberry Pi como um Desktop, completo com monitor e HD externo" src="/static/images/raspberry_pi_as_desktop_pc.jpg" /></p>
<p>Porém, antes de jogar o seu PC fora e procurar o SBC mais próximo, saiba que o Raspberry Pi não é uma bala de prata e uma alternativa 100% a alguns tradicionais computador desktop (ainda). Na maioria das vezes, a limitação maior são os recursos como memória e capacidade do processador. </p>
<p>A versão mais atual do Raspberry Pi (no momento desta publicação em Dezembro de 2020) por exemplo é o <a href="https://amzn.to/34zoLuV">Raspberry Pi 4B</a>, que possui 4GB de memória RAM e um processador ARMv8 quad-core 1.5GHz. Estas são especificações impressionantes para um SBC alimentado por fonte de celular, mas que provavelmente deixam um pouco a desejar para usuários mais <em>power users</em> ou que almejam utilizar seu computador para tarefas mais arrojadas como edição de vídeo ou áudio, ou jogos. </p>
<p>Em comparação a um laptop, o Raspberry Pi também pode deixar a desejar em quesito de mobilidade, pois não possui bateria nem os acessórios periféricos como a tela ou teclado embutidos. Há projetos de hardware que buscam resolver estes dois casos, com talvez o mais famoso deles sendo o <a href="https://www.pine64.org/">PINE64</a>, que monta laptops e até smartphones utilizando a placa do Raspberry Pi como base.</p>
<p>Outra limitação é que o próprio hardware do Raspberry Pi, que utiliza um processador da <a href="https://www.arm.com/why-arm/architecture">arquitetura ARM</a>, não suporta ainda todos os sistemas operacionais existentes. Estes frequentemente focam na arquitetura x86, popularizada pela instalação do <em>Personal Computer</em> desde os anos 90, e ainda dominam o mercado. Software como jogos ou aplicativos proprietários específicos ainda não suportam esta plataforma amplamente.</p>
<p>Felizmente quase todo o software livre suporta a arquitetura ARM e roda muito bem no Raspberry Pi. Pelo menos cinco das <a href="https://distrowatch.com/dwres.php?resource=major">maiores distribuições Linux</a> oficialmente suportam a arquitetura ARM, podendo ser instaladas no Raspberry Pi. Isto nos leva ao nosso próximo ponto: por quê você <em>deve</em> utilizar software livre em conjunto com ele.</p>
<h2>O que é o Software Livre e porque ele é a melhor escolha para o Raspberry Pi?</h2>
<p>Se o hardware do nosso computador é um carro, o software certamente é o motor que lhe dá vida. A escolha do software que você instala e roda no computador é altamente responsável pela sua performance e a experiência que você tira ao utilizá-lo. </p>
<p>Quantas vezes não nos frustramos com algum software que "dá pau" de vez em quando, ou que é extremamente lento para performar? Você acha que comprar um computador novo é a solução? Acredite, nossos computadores <em>não</em> envelhecem com o tempo - é o software que instalamos neles que se torna cada vez maior e menos eficiente. Quando utilizamos software não-livre como o Windows, que são proprietários e distribuidos somente pela Microsoft, não temos como nos livrar deste destino, senão por aceitá-lo e trocar de computador com frequência.</p>
<p>Embora não podemos controlar 100% a forma que o software é criado e atualizado, o <a href="https://www.gnu.org/philosophy/free-sw.pt-br.html">Software Livre</a> oferece uma alternativa ao software que é desenvolvido atrás de portas fechadas e que ninguém consegue dizer ao certo como funciona, ou por que ele funciona de uma certa maneira. Quando o software é livre, <a href="https://www.gnu.org/philosophy/free-sw.html">temos a liberdade</a> de utilizá-lo, modificá-lo (ou solicitar a modificação) e distribuí-lo como quisermos.</p>
<p><img alt="The four software freedoms - Credit: Free Software Magazine" src="http://freesoftwaremagazine.com/articles/rule_1_hold_on_loosely/c20080905_four_freedoms.jpg" /></p>
<p>Estas liberdades, combinada com o fato que o Software Livre frequentemente é mais seguro e eficiente do que o proprietário, tornam o Software Livre a implementação perfeita para ser utilizada com o seu Raspberry Pi. É através deste software que iremos torná-lo um computador que fará tudo o que desejamos dele no nosso dia-a-dia, seja um Desktop, servidor caseiro, servidor para um site pessoal hospedado na sua própria casa, drive de rede, ou servidor VPN para bloquear anúncios.</p>
<p>Quais Sistemas operacionais livres você deve usar, então? A escolha, como sempre, é sua, mas nossa recomendação é o <a href="https://ubuntu.com/download/raspberry-pi">Ubuntu Linux</a>, por ser simples e familiar de se utilizar e configurar, mas outras distribuições e o FreeBSD também são ótimos candidatos.</p>
<p>Combinando o Raspberry Pi e o Software Livre, temos uma plataforma de computação verdadeiramente completa para resolver todos os problemas que você tiver.</p>
<h2>Quais são os próximos passos para começar com o Raspberry Pi?</h2>
<p>Se você leu até aqui e está interessado em aprender mais, assine o feed deste blog para não perder nenhum artigo que postamos aqui.</p>
<p>Seus próximos passos lógicos são escolher um modelo de Raspberry Pi (ou outro SBC) e feito isso, escolher qual Sistema Operacional irá instalar nele, e colocar a mão na massa! Falaremos mais sobre cada um destes passos nos nossos próximos posts.</p>
<p>O que você achou de começar a utilizar o Raspberry Pi? Conhece outros SBCs que também são interessantes? <a href="https://qoto.org/@raspibrasil">Siga-nos no Mastodon</a> e nos conte o que achou!</p>
<p>Abraços!</p>
<p><em>Publicado em 22 de Dezembro de 2020</em></p>
            </div>
        </content>
    </entry>

    <entry>
        <title>Como escolher o seu primeiro Raspberry Pi?</title>
        <link href="https://raspibrasil.github.io/blog/como_escolher_seu_raspberry_pi/" />
        <id>urn:uuid:5ca7b190-9d47-5490-baa9-ae40b1457f27</id>
        <updated>2025-02-04T13:53:35.300873Z</updated>
        <content type="xhtml">
            <div xmlns="http://www.w3.org/1999/xhtml">
                <h1>Como escolher o seu primeiro Raspberry Pi?</h1>
<p>Olá mundo, e feliz ano novo atrasado! Desde que publicamos <a href="/blog/bem_vindo_ao_raspberrypi_brasil/">nosso primeiro artigo explicando o que são o Raspberry Pi, SBCs e o Software Livre</a>, a grande pergunta que ficou foi: diante de tantos modelos de SBCs (e do próprio Raspberry Pi)  existentes, como escolher aquele que é o melhor para nós?</p>
<p>Pensando nesta dúvida frequente entre os iniciantes no Single Board Computing, elaboramos este artigo para tirar suas dúvidas e informá-lo da melhor maneira possível para dar o seu primeiro passo neste mundo incrível de aprendizado e realização.</p>
<p>Venha conosco!</p>
<h2>Objetivos e Recursos</h2>
<p>A sua decisão em qual SBC é o melhor para você provém principalmente de duas grandes variáveis: o seu <strong>objetivo</strong> em usar o dispositivo, e quanto de <strong>recursos</strong> você necessitará.</p>
<p>O seu objetivo pretendido ao utilizar o seu Raspberry Pi ou SBC poderá afetar significantemente a sua escolha final. Por exemplo: você pretende utilizá-lo mais como um computador Desktop, conectando um monitor, teclado e mouse nele? Ou pretende utilizá-lo mais como um servidor em rede, instalando-o em algum lugar remoto na casa e administrando-o através da rede? Ou está pensando em sair um pouco do mundo do software e quer montar máquinas e mexer com hardware?</p>
<p>Embora seja possível alcançar cada um dos objetivos acima com qualquer SBC, alguns são mais apropriados para cada uma destas tarefas.</p>
<h3>Desktop</h3>
<p>Versões recentes do Raspberry Pi, especialmente a partir do <a href="https://amzn.to/3slgdlW">modelo 4</a>, são análogas a um computador desktop e em muitos casos possuem especificações iguais ou melhores que alguns deles. Nossa recomendação é que pelo menos 4 GB de memória RAM sejam dedicados para o uso de um SBC como uma alternativa a um computador Desktop, e com bastante conectividade USB ou sem fio para conectar periféricos.</p>
<p>Com 4 a 8 GB de memória, o <a href="https://amzn.to/3slgdlW">Raspberry Pi 4</a> funciona bem como uma reposição de um computador Desktop, consumindo significante menos energia e apresentando uma interface gráfica familiar e eficiente quando combinado com o poder do <a href="/blog/bem_vindo_ao_raspberrypi_brasil.html">Software Livre</a>. A presença de WiFi e Bluetooth integrada no chip torna-o ainda mais poderoso, possibilitando você a conectar seus periféricos sem fio facilmente, e conectar a uma rede caseira sem fio com facilidade.</p>
<p>Um outro projeto de SBC projetado pela Asus, o <a href="https://www.asus.com/us/Single-Board-Computer/Tinker-Board/">Asus Tinkerboard</a> possui especificações parecidas com Desktops tradicionais, podendo até mesmo exibir vídeo em resolução 4K. É uma alternativa interessante ao Raspberry Pi como um Desktop.</p>
<h3>Servidor</h3>
<p>O Raspberry Pi também funciona bem como um servidor em rede por conta do seu baixo consumo de energia, tamanho compacto e suas especificações bem-posicionadas para pequenos servidores. Por conta do consumo relativamente menor de recursos em comparação aos computadores desktops atuais, até modelos mais antigos do Raspberry Pi, como o <a href="https://amzn.to/3qlUOqH">Raspberry Pi 3</a> com 1GB de memória, podem ser suficientes nestes casos.</p>
<p>Graças à eficiência e dos sistemas operacionais livres disponíveis para servidores, é possível colocar um SBC com recursos relativamente modestos performando bem como um servidor pessoal. Como resultado, o consumo de energia e a geração de calor também são bastante reduzidos, podendo algumas vezes não precisar de refrigeração para serem mantidos.</p>
<p>Outras alternativas para esta forma de utilização incluem outros fabricantes de SBCs como o <a href="https://en.wikipedia.org/wiki/Banana_Pi">Banana Pi</a>, ou o <a href="https://amzn.to/35GN62I">BeagleBone</a>.</p>
<h3>Integração de Hardware e IoT</h3>
<p>Quando se trata de projetos com foco em Hardware - por exemplo: sensores, controle remoto, Internet of Things (IOT) - ainda é possível utilizar o Raspberry Pi para diversos projetos, dado suas interfaces diversas de comunicação, e a possibilidade de extendê-lo através da <a href="https://en.wikipedia.org/wiki/PCI_Express">interface PCI Express</a> com periféricos extras de forma compacta. Porém, neste campo o campeão indiscutível é o projeto <a href="https://www.arduino.cc/">Arduino</a>.</p>
<p>Não há apenas um único "modelo" de Arduino: você adquire as placas contendo o CPU e as arruma conforme as suas necessidades de hardware. É possível integrá-lo com <a href="https://amzn.to/3bEImOT">sensores de ambiente</a>, <a href="https://amzn.to/3oMeofz">motores</a>, e <a href="https://amzn.to/3bGXjje">inúmeros outros periféricos</a> para adaptá-lo perfeitamente às suas necessidades.</p>
<p>O Arduino também integra o lado do software em seus produtos, com todos os componentes sendo programáveis através de linguagens de programação como o C ou <a href="https://amzn.to/3qnhcju">Python</a>. É uma forma prática de trazer um projeto de software para a vida real.</p>
<h2>Apetrechos e periféricos</h2>
<p>Embora utilizável por si próprio, a performance e experiência do Raspberry Pi podem ser melhoradas com a adição de alguns periféricos que extendem sua utilização e oferecem proteção ao equipamento. </p>
<p>Como recomendação mínima, recomendamos a utilização pelo menos de um <a href="https://amzn.to/3qjZ7Ty">case de proteção</a> para a frágil placa do Raspberry Pi e, no caso do Raspberry Pi 4, a <a href="https://amzn.to/3nEGcRG">fonte oficial do Raspberry Pi Foundation</a>, já que modelos a partir desta versão possuem uma amperagem um pouco maior do que as fontes de celular comuns. E se utilizado como um computador desktop, recomendamos também a compra de um <a href="https://amzn.to/35JxY4x"><em>heatsink</em></a> por conta do calor gerado por seu processador mais poderoso.</p>
<p>Para saber mais sobre os diversos acessórios para complementar e melhorar a experiência do Raspberry Pi, preparamos para você um post exclusivo sobre o assunto: <a href="/blog/melhores_acessorios_raspberry_pi.html">Quais os melhores acessórios e periféricos para o Raspberry Pi?</a></p>
<h2>Guia rápido de escolha</h2>
<p>Sumarizando o post e para facilitar a sua escolha, segue abaixo um guia rápido descrevendo as escolhas recomendadas para o seu primeiro SBC dependendo do seu caso de uso:</p>
<ul>
<li><strong>Desktop</strong>: <a href="https://amzn.to/3slgdlW">Raspberry Pi 4</a>, de 4 a 8GB de RAM, ou Asus Tinkerboard.</li>
<li><strong>Apenas como servidor</strong>: <a href="https://amzn.to/3qlUOqH">Rasberry Pi 3B</a>, <a href="https://amzn.to/35GN62I">BeagleBone</a>.</li>
<li><strong>Projetos de IOT ou customização de hardware</strong>: <a href="https://amzn.to/3bGXjje">Arduino</a>.</li>
</ul>
<p>Estas três categorias provavelmente cobrirão a maior parte dos casos de uso, mas dada a abundância de alternativas é possível ter combinações bem variadas de hardware na sua jornada.</p>
<p>E para você, qual é o melhor SBC para cada tipo de uso e por quê? Escreva sua resposta para a nossa <a href="https://qoto.org/@raspibrasil">conta no Mastodon</a>!</p>
<p>Abraços e até o nosso próximo post!</p>
<p>Equipe Raspberry Pi Brasil</p>
            </div>
        </content>
    </entry>

    <entry>
        <title>Como instalar Linux no Raspberry Pi?</title>
        <link href="https://raspibrasil.github.io/blog/como_instalar_linux_raspberry_pi/" />
        <id>urn:uuid:031e33f0-4c29-5e3d-9ad6-b62184e9433e</id>
        <updated>2025-02-04T13:53:35.300873Z</updated>
        <content type="xhtml">
            <div xmlns="http://www.w3.org/1999/xhtml">
                <h1>Como instalar Linux no Raspberry Pi?</h1>
<p>Quando se trata de trabalho com <em>Single Board Computers</em>, <a href="/blog/como_escolher_seu_raspberry_pi/">escolher o hardware</a> é apenas metade da questão. Além da variedade de modelos que se encontram à disposição, escolher o <a href="https://pt.wikipedia.org/wiki/Sistema_operativo">sistema operacional</a> (OS em Inglês), que proverá todo o suporte para o seu trabalho no seu SBC, é essencial.</p>
<p>A diversidade de sistemas operacionais disponíveis para SBCs como o Raspberry Pi é enorme, maior ainda que a de hardware, e a escolha de qual sistema utilizar pode ser um pouco confusa, especialmente se você nunca trabalhou com outro OS fora do Windows. Adicionalmente, a instalação de um OS no Raspberry Pi não segue um procedimento padrão de instalação onde se clica em menus e botões para avançar para os próximos passos e finalizar o processo. Felizmente, esta tarefa não precisa ser difícil; de fato, mostraremos passo a passo o processo.</p>
<p>Para os propósitos deste post, detalharemos o processo de instalação do sistema operacional <a href="https://en.wikipedia.org/wiki/Raspberry_Pi_OS">Raspberry Pi OS</a> (previamente conhecido como Raspbian), uma distribuição Linux baseada no <a href="https://www.debian.org">Debian</a> e desenvolvida oficialmente pela <a href="https://www.raspberrypi.org/software/operating-systems/">Raspberry Pi Foundation</a>. Embora Raspberry Pi OS seja um dos sistemas mais populares utilizados no Raspberry Pi, ele certamente não é o único, e diversas outras distribuições de Linux podem ser instaladas com este processo, que como você verá, não é complicado.</p>
<p>Vamos em frente.</p>
<h2>Por que Linux?</h2>
<figure>
    <img src="/static/images/tux.png" alt="Tux, o mascote do Linux"/>
    <figcaption>Tux, o pinguim mascote do Linux</figcaption>
</figure>

<p>Este artigo, tal como o site em geral, foca no Linux porque acreditamos que este é o sistema mais eficiente para um computador pessoal ou servidor com recursos limitados. As razões por trás desta decisão são várias.</p>
<p>Primeiramente, sistemas Linux (chamados de <em>Distribuições Linux</em>) são <a href="/blog/bem_vindo_ao_raspberrypi_brasil/">Software Livre</a>, podendo desta forma ser instalados, copiados e modificados conforme necessário. Este ponto é essencial para o aprendizado, experimentação e pesquisas, onde pode ser necessário reinstalar do zero um sistema depois de um erro de configuração, ou instalar em diversas máquinas para a utilização em rede ou para simular outras interações entre sistemas - e claro, completamente <strong>sem custo algum</strong>.</p>
<p>A liberdade de modificação também significa que os sistemas Linux podem ter componentes não-essenciais removidos ou refatorados, tornando-os muito <strong>mais leves e rápidos</strong> ao serem utilizados. Em computadores com recursos limitados como o <a href="https://amzn.to/3qlUOqH">Raspberry Pi 3</a>, ou anteriores, esta diferença é crucial para uma experiência suave e prazerosa, ao contrário de um sistema pesado e lento.</p>
<p>Além da leveza e a flexibilidade do sistema, o Linux também é geralmente considerado um sistema <strong>mais seguro</strong> do que o onipresente Windows. Este é um ponto importantíssimo quando se trata de trabalhar com o Raspberry Pi como um servidor (onde múltiplos clientes e usuários podem acessar recursos dele) por longos períodos de tempo. Embora a segurança é crucial em todos os sistemas de computadores, quando um único desktop é comprometido, um único usuário é afetado. Quando um servidor é comprometido, todos os seus usuários estão em potencial perigo. Utilizar um sistema que é seguro por padrão e constantemente atualizado como o Linux é crucial.</p>
<p>Finalmente, há a inúmera possibilidade de <strong>escolhas</strong> quando tratamos do Linux. Não só temos a flexibilidade para modificar e construir nosso sistema como quisermos, mas também podemos escolher entre vários sistemas já disponíveis para nos servir da melhor maneira. Há imagens genéricas, prontas para uso do Raspberry Pi como um desktop, como o próprio Raspberry Pi OS, outras prontas para servidores como o Ubuntu Server Edition, outras são mais minimalistas como o <a href="https://archlinuxarm.org">Arch Linux</a>, que permite você a construir seu sistema do zero.</p>
<p>Seguindo em frente, vejamos como instalar um sistema operacional no Raspberry Pi.</p>
<h2>Como o processo de instalação funciona no Raspberry Pi</h2>
<p>Diferente da instalação num computador tradicional, onde primeiro insere-se a mídia de instalação do sistema operacional e os dados são depois copiados para o disco rígido, no Raspberry Pi o processo é um pouco mais integrado, embora similar em conceito.</p>
<figure>
  <a href="https://amzn.to/3l3UOuh"><img src="/static/images/sd_card.jpg" alt="Exemplo de MicroSD Card" /></a>
  <figcaption>Ao contrário dos computadores tradicionais, no Raspberry Pi você precisa extrair a imagem de instalação diretamente na sua mídia de armazenação</figcaption>
</figure>

<p>Para instalar qualquer sistema operacional no Raspberry Pi, você precisa <em>extrair uma imagem</em> (arquivo <code>.img</code>) já pré-configurada deste sistema num <a href="https://amzn.to/3rA6QxW">cartão MicroSD</a> que será utilizado nele. Se você nunca utilizou Linux antes (onde este é o processo padrão para criação de <em>Live Media</em>), este conceito pode parecer um pouco estranho, mas felizmente existem ferramentas didáticas que tornam o processo simples e rápido.</p>
<p>Se você usa Windows ou não está acostumado a lidar com a linha de comandos do terminal do Linux, o aplicativo <a href="https://github.com/raspberrypi/rpi-imager">Raspberry Pi Imager</a> desenvolvido pela Raspberry Pi Foundation é a maneira recomendada para fazer a instalação. Você pode baixá-lo para Windows, Mac e algumas das principais distribuições Linux como o Ubuntu e Debian. Felizmente, mesmo se a sua distribuição Linux não for suportada, ainda é possível instalar a imagem utilizando o comando <code>dd</code> do Linux, que veremos mais à frente.</p>
<p>Com um cartão MicroSD em mãos, vejamos na próxima seção como instalar o Raspberry Pi OS no Raspberry Pi.</p>
<h2>Instalando o Raspberry Pi OS no através do Raspberry Pi Imager</h2>
<p>Primeiramente, baixe o Raspberry Pi Imager do repositório do <a href="https://www.raspberrypi.org/downloads/">Raspberry Pi Foundation</a> para a sua plataforma. Uma vez instalada, abra o programa e verá a seguinte mensagem:</p>
<figure>
    <img src="/static/images/rpi_imager_menu.jpg" alt="Menu principal do Raspberry Pi Imager" />
    <figcaption>Menu principal do Raspberry Pi Imager</figcaption>
</figure>

<p>O Raspberry Pi Imager pode tanto baixar uma imagem de uma lista pré-inclusa nas suas opções (Raspberry Pi OS e Ubuntu Server Edition) e extraí-la para o seu cartão MicroSD ou utilizar uma imagem que você já baixou para o seu computador para extraí-la ao cartão MicroSD. Como neste caso estamos lidando com o Raspberry Pi OS, utilizaremos a própria função do Imager para baixar e instalar a imagem:</p>
<figure>
    <img src="/static/images/rpi_imager_choosing_os.jpg" alt="Escolhendo uma imagem para baixar e instalar" />
    <figcaption>Escolhendo baixar a imagem do Raspberry Pi OS através do próprio Imager</figcaption>
</figure>

<p>É possível também escolher uma imagem que você já baixou de outro lugar também através do aplicativo. Por exemplo, para instalar <a href="http://www.puppylinux.org/">Puppy Linux</a>, basta você primeiro baixar seu arquivo de imagem (terminando com a extensão <code>.img</code>) e escolhê-lo na interface do Raspberry Pi Imager:</p>
<figure>
    <img src="/static/images/rpi_imager_custom_image.jpg" alt="Opção para escolher uma imagem customizada" />
    <figcaption>Opção do Imager para escolher uma imagem já existente no seu computador</figcaption>
</figure>

<figure>
    <img src="/static/images/rpi_imager_custom_image2.jpg" alt="Diálogo de escolha de arquivos .img" />
    <figcaption>Escolhendo uma imagem no seu computador</figcaption>
</figure>

<p>Escolha em seguida o slot do seu cartão MicroSD (geralmente <code>/dev/sdb</code> ou <code>/dev/mmcblk0</code> no Linux) para o qual a imagem será extraída.</p>
<figure>
    <img src="/static/images/rpi_imager_choosing_sdcard.jpg" alt="Escolhendo o dispositivo do SD Card" />
    <figcaption>Escolhendo o dispositivo do Cartão MicroSD</figcaption>
</figure>

<blockquote>
<p>Atenção: ao realizar este procedimento, todos os dados do cartão MicroSD serão permanentemente apagados. Faça o backup destes dados antes de prosseguir.</p>
</blockquote>
<p>Clique OK. O Raspberry Pi Imager baixará a imagem (dependendo do tamanho, pode demorar bastante), e em seguida automaticamente extraí-la para o seu cartão MicroSD.</p>
<p>Ao fim do processo, você poderá remover o seu cartão SD e inserí-lo no seu Raspberry Pi para começar a usar Linux nele. A instalação está concluída.</p>
<h3>Instalando através da linha de comando</h3>
<p>Se você usa uma distribuição Linux não oficialmente suportada pelo Raspberry Pi Imager, não se preocupe: é perfeitamente possível extrair a imagem através da linha de comando (terminal). Para isso, o comando <code>dd</code> é utilizado.</p>
<p>Se o seu dispositivo do cartão SD é <code>/dev/mmcblk0</code>, e a sua imagem é <code>distro.img</code> o comando:</p>
<pre><code>sudo dd if=distro.img of=/dev/mmcblk0 bs=4M status=progress
</code></pre>
<p>Irá realizar a extração e preparo do seu cartão SD. Quando este terminar (pode demorar até 5 minutos dependendo do tamanho da imagem) você poderá utilizar o cartão SD no seu Raspberry Pi.</p>
<p>O comando <code>dd</code> é poderoso, mas a sua utilização errada pode causar a destruição dos dados armazenados no dispositivo. Por isso, deve ser utilizado com cuidado. Falaremos mais sobre este comando no futuro.</p>
<h2>Conclusão</h2>
<p>Instalar Linux no Raspberry Pi é um pouco diferente de um computador comum, mas nem por isso é difícil. Utilizando-se do programa Raspberry Pi Imager, o processo é intuitivo, e usuários avançados podem utilizar a linha de comando para rapidamente realizá-lo. Uma vez realizada a instalação, você está pronto para começar a usar o Linux no Raspberry Pi. É um novo mundo, e falaremos mais sobre isso no futuro.</p>
<p>Você já instalou Linux no Raspberry Pi? Qual distribuição e qual método utilizou? Mande uma mensagem para nossa conta no <a href="https://qoto.org/@raspibrasil">Mastodon!</a></p>
<p>Abraços!</p>
<p><strong>Equipe Raspberry Pi Brasil</strong></p>
            </div>
        </content>
    </entry>

    <entry>
        <title>Usando o Raspberry Pi como um NAS na sua rede caseira</title>
        <link href="https://raspibrasil.github.io/blog/compartilhando_arquivos_nas_raspberrypi/" />
        <id>urn:uuid:8f1f1da2-576d-5e96-a067-646b0aa02c2a</id>
        <updated>2025-02-04T13:53:35.304207Z</updated>
        <content type="xhtml">
            <div xmlns="http://www.w3.org/1999/xhtml">
                <h1>Usando o Raspberry Pi como um NAS na sua rede caseira</h1>
<p>Depois de <a href="/blog/como_escolher_seu_raspberry_pi/">escolher o modelo apropriado</a> do seu Raspberry Pi e <a href="/blog/como_instalar_linux_raspberry_pi/">instalar Linux nele</a>, podemos finalmente começar a brincar com ele e experimentá-lo com várias soluções e <em>stacks</em> de software para nos servir da melhor forma. Afinal, é através destes constantes experimentos que podemos melhorar nosso entendimento e experiência com o <a href="/blog/bem_vindo_ao_raspberrypi_brasil/">Software Livre</a>.</p>
<p>Uma das melhores formas de estudar o software livre é através da aplicação prática: procure um projeto que poderá ajudar você a realizar alguma tarefa, e aprenda com sua implementação. Neste artigo, mostraremos como é fácil tornar o seu Raspberry Pi num dispositivo de <strong>armazenamento em rede</strong> na sua casa através de um software chamado <a href="https://www.samba.org">Samba</a>, que permitirá você a compartilhar arquivos entre todos os dispositivos da sua casa, independente se rodarem Linux, Windows, Mac, Android, ou iOS.</p>
<p>Vamos em frente!</p>
<h2>Como o armazemanento em rede (NAS) funciona</h2>
<p>Para este projeto, tornaremos o Raspberry Pi num dispositivo de <a href="https://en.wikipedia.org/wiki/Network-attached_storage"><em>Network Attached Storage</em></a> ou, abreviadamente, <em>NAS</em>. </p>
<p>O NAS funciona como um servidor central de arquivos dentro da rede, com o qual outros computadores e dispositivos podem interagir para armazenar ou recebê-los. Se você já trabalhou num escritório onde haviam drives de redes disponíveis (F:\, G:\, etc.), o NAS via Samba funciona de forma quase idêntica.</p>
<figure>
    <img src="https://cdn.ttgtmedia.com/rms/onlineImages/network_attached_storage_mobile.jpg" alt="arquitetura do NAS numa rede local" />
    <figcaption>O NAS atua como um ponto central através do qual outros dispositivos clientes podem enviar ou receber arquivos</figcaption>
</figure>

<p>Da mesma forma que um servidor web utiliza o protocolo HTTP para enviar sites para navegadores da web, um servidor de arquivos "conversa" com computadores em rede através de um protocolo chamado SMB. O Samba é o servidor mais popular deste protocolo disponível para o Linux, e será o software que utilizaremos neste projeto.</p>
<h2>Requerimentos para este projeto</h2>
<p>Para este projeto, graças à leveza do Samba junto ao sistema Linux, versões modestas do Raspberry Pi podem ser utilizadas para realizar a tarefa. Edições <a href="/blog/como_escolher_seu_raspberry_pi/">orientadas à servidores</a> como o <a href="https://amzn.to/3sb9NoL">Raspberry Pi 3B</a> podem muito bem manuseá-lo, assim como o poderoso <a href="https://amzn.to/2QuK0Kn">Raspberry Pi 4</a> e até mesmo o primeiro modelo do <a href="https://amzn.to/3vLW75S">Raspberry Pi B</a> de 2012 possui recursos suficientes para agir como um NAS caseiro.</p>
<figure>
    <img src="https://images-na.ssl-images-amazon.com/images/I/71srygtslbL._AC_SL1131_.jpg" />
    <figcaption>O <a href="https://amzn.to/3vLW75S">Raspberry Pi Model B</a> original de 2012 pode servir como um NAS numa rede caseira de poucos dispositivos</figcaption>
</figure>

<p>Para a parte de software, utilizaremos o <em>Raspberry Pi OS</em> como sistema operacional por conta da facilidade de se instalar e configurar software nele. Se você gostaria de mais informações sobre como instalar o Raspberry Pi OS, escrevemos anteriormente um <a href="/blog/como_instalar_linux_raspberry_pi/">artigo descrevendo o processo passo-a-passo</a>.</p>
<p>Uma <em>conexão de internet</em> no Raspberry Pi é necessária para instalar e configurar seu NAS, podendo tanto ser cabeada ou WiFi. Uma conexão cabeada é recomendada por conta da maior velocidade e estabilidade em relação ao WiFi, mas ambas funcionam.</p>
<p>Finalmente, é necessário ter espaço suficiente para armazenar os arquivos a serem compartilhados. Você pode utilizar armazenamento externo como um <a href="https://amzn.to/3fabSgW">Pendrive de alta velocidade</a> ou um <a href="https://amzn.to/3f3UR87">HD externo</a>, ou armazenar diretamente no cartão MicroSD do seu Raspberry Pi.</p>
<h2>Instalando e configurando o Samba no Raspberry Pi</h2>
<p>Primeiramente, instale o pacote <code>samba</code> no Raspberry Pi OS utilizando o seguinte comando no terminal:</p>
<pre><code>sudo apt-get install samba
</code></pre>
<p>Este comando também funciona no Ubuntu Server Edition para Raspberry Pi OS. <code>apt</code> listará as dependências necessárias para insalar o Samba. Pressione 'y' e Enter para prosseguir. </p>
<p>Após a instalação, o serviço do Samba (<code>smbd</code> nos sistemas Linux) é iniciado automaticamente, mas ainda é necessário configurá-lo para fazê-lo funcionar da maneira exata que queremos. Em nosso caso, configuraremos o Samba para compartilhar apenas um diretório específico do nosso sistema, conhecido como <em>mountpoint</em> em inglês, e nos certificar que apenas usuários designados possam acessá-los.</p>
<p>Para isso, antes de começar a configuração, criaremos um usuário específico para acessar e manipular os arquivos via Samba. Você também poderia usar o seu usuário padrão para isso, mas por segurança é desejável ter um usuário específico para operar serviços. Desta forma, se por algum motivo o Samba seja comprometido, você poderá simplesmente deletar o usuário do Samba e recriá-lo - o seu usuário pessoal não será impactado.</p>
<p>Para criar o usuário <code>sambauser</code>, que será designado para o Samba, utilize o seguinte comando:</p>
<pre><code>sudo useradd -r -m -U -d /home/sambauser -s /bin/bash sambauser
</code></pre>
<p>Através deste comando, o usuário sambauser não terá uma senha associada a ele, outra medida de segurança que impede logins locais no sistema de serem realiados. Isso não é um problema, porém, porque todo o trabalho do sambauser será realizado remotamente através do serviço do Samba. Para isso, precisamos configurá-lo sob estas considerações.</p>
<p>Com o usuário criado, crie um diretório que servirá de <em>mountpoint</em> para o seu NAS. Você poderá criá-lo em qualquer lugar do seu sistema, inclusive em armazenamento externo. Neste exemplo, criaremos no próprio cartão SD do seu Raspberry Pi, dentro do diretório Home do seu usuário (por padrão, <code>pi</code> no Raspberry Pi OS) e concederemos as permissões corretas para que o usuário sambauser possa acessá-lo:</p>
<pre><code>mkdir /home/pi/NAS
chmod 777 /home/pi/NAS
</code></pre>
<p>Com isso, podemos Como tudo no Linux, a configuração do Samba é feita através de um arquivo de texto simples, localizado em <code>/etc/samba/smb.conf</code>. Para editá-lo, abra-o com o seu editor de texto favorito prefixado com <code>sudo</code>, por conta de ser um arquivo do sistema. Por exemplo:</p>
<pre><code>sudo nano /etc/samba/smb.conf
</code></pre>
<p>A configuração padrão do Samba já é bem completa em termos de funcionalidade e segurança. Precisamos apenas adicionar o <em>mountpoint</em> desejado e quais usuários poderão ter acesso a ele. Adicione o seguinte segmento no fim do arquivo <code>smb.conf</code>:</p>
<pre><code>[NAS]
    comment = NAS on RaspberryPi
    path = /home/pi/NAS
    browseable = yes
    read only = no
    create mask = 0777
    directory mask = 0777
    valid users = sambauser pi
    guest ok = no
</code></pre>
<p>A linha <code>valid users = sambauser pi</code> especifica que apenas estes dois usuários terão acesso (via Samba) à este serviço (também é possível tornar o compartilhamento público, mas este não é o escopo deste artigo).</p>
<p>Finalmente, é necessário adicionar o usuário sambauser à lista de usuários autenticados pelo serviço Samba. Para este caso, será necessário adicionar uma senha para ele, válida apenas para o Samba. Guarde-a bem: <strong>é com esta senha que você irá utilizar o Samba.</strong></p>
<pre><code>sudo smbpasswd -a sambauser
</code></pre>
<p>Para finalizar, reinicie o serviço do Samba no Raspberry Pi OS com o seguinte comando:</p>
<pre><code>sudo systemctl restart smbd
</code></pre>
<p>O samba estará rodando e compartilhando o diretório que você especificou como <em>mountpoint</em>. Para testá-lo, obtenha o seu endereço IP com o comando <code>ip addr</code>. No Windows, acesse <code>\\xxx.xxx.xxx.xxx\NAS$</code> do Windows Explorer, onde <code>xxx.xxx.xxx.xxx</code> é o endereço IP do seu Raspberry Pi. No Linux, acesse <code>smb://xxx.xxx.xxx.xxx/NAS</code> no seu gerenciador de arquivos favorito.</p>
<h2>Tornando o seu NAS mais eficiente</h2>
<p>Seu NAS está pronto para trabalhar e compartilhar arquivos entre seus vários dispositivos da sua casa. Ainda há outras coisas que podem ser feitas para otimizá-lo caso você quiser, afinal o aprendizado sempre é constante no Linux, entre elas as seguintes:</p>
<ul>
<li>Para garantir a confidencialidade da conexão entre o NAS e os dispositivos clientes, é possível realizar a transferência dos arquivos com um protocolo chamado <strong>SFTP</strong>, que emprega o famoso Secure Shell (SSH) para proteger a conexão e transferência dos arquivos. Falaremos mais sobre como implementá-lo junto ao SSH num artigo futuro.</li>
<li>É possível aumentar a velocidade da transferência usando armazenamento externo como um <a href="https://amzn.to/3f3UR87">HD</a> ou até mesmo <a href="https://amzn.to/3r9y5hu">SSD externo</a>. Outra vantagem do SSD é que eles poderão durar muito mais tempo que um HD tradicional, por conta da ausência de falhas mecânicas e os ciclos reduzidos de escrita e leitura quando implementados apenas como armazenamento.</li>
</ul>
<h2>Conclusão</h2>
<p>Tornar seu Raspberry Pi num NAS caseiro para compartilhar arquivos entre seus dispositivos na sua casa não é complicado, e nem requer muitos recursos. Graças à simples implementação do Samba, é possível começar a compartilhar arquivos em questão de alguns minutos com apenas um pouco de configuração.</p>
<p>A implementação do Samba no Raspberry Pi exemplifica novamente como o aprendizado do <a href="/blog/bem_vindo_ao_raspberrypi_brasil/">Software Livre</a> se torna muito mais poderoso e apreciável quando envolve uma aplicação prática do conhecimento. Ao realizar este projeto, você estará tanto aprendendo mais sobre administração de sistemas quanto também realizando um serviço aos seus interesses. É sob esta combinação que o aprendizado flui.</p>
<hr />
<p>O que você achou de tornar o Raspberry Pi num NAS para compartilhar arquivos? Conhece alguma outra solução para realizar este tipo de compartilhamento numa rede caseira? Deixe-nos saber na nossa <a href="https://qoto.org/@raspibrasil">conta no Mastodon!</a></p>
            </div>
        </content>
    </entry>

    <entry>
        <title>Hospede o seu site de graça na sua própria casa usando o Raspberry Pi</title>
        <link href="https://raspibrasil.github.io/blog/hospedando_seu_site_raspberry_pi/" />
        <id>urn:uuid:5b3647f9-a899-5d69-a951-8455c30c7e25</id>
        <updated>2025-02-04T13:53:35.304207Z</updated>
        <content type="xhtml">
            <div xmlns="http://www.w3.org/1999/xhtml">
                <h1>Hospede o seu site de graça na sua própria casa usando o Raspberry Pi</h1>
<p>Há poucos limites sobre o que o seu Raspberry Pi pode fazer quando combinado com o poder e flexibilidade do <a href="/blog/bem_vindo_ao_raspberrypi_brasil/">Software Livre</a>. Anteriormente, por exemplo, demonstramos como o é possível tornar o Raspberry Pi num <a href="/blog/compartilhando_arquivos_nas_raspberrypi/">servidor NAS</a>, permitindo o compartilhamento de arquivos entre os dispositivos da sua rede local. É com esta aplicação prática do Software Livre com o conhecimento que realmente podemos aprender como o nosso computador realmente funciona.</p>
<p>Seguindo os nossos estudos após aprender a utilizá-lo como um servidor e <a href="/blog/tornando_seu_raspberry_pi_visivel_internet/">torná-lo visível na internet</a>, daremos um passo à frente e mostrar neste artigo como você pode <strong>hospedar o seu próprio site</strong>, de graça, na sua casa com o Raspberry Pi. Esta é uma técnica conhecida como <em>self-hosting</em> e embora pareça complicado em princípio, a técnica é bastante simples e rápida de se implementar.</p>
<p>Vamos em frente.</p>
<h2>Instalando um servidor web no Raspberry Pi</h2>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Client-server-model.svg/500px-Client-server-model.svg.png" alt="como o modelo client-server funciona" />
    <figcaption>
    O modelo "cliente e servidor" utilizado na internet institui que vários dispositivos externos podem acessar o conteúdo provido por um servidor central através de uma rede, que pode ser a internet. Para hospedar um site, usamos um servidor Web. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Para hospedar um serviço, é necessário um servidor que o providencie em sua rede. No caso de um site na internet, este servidor é chamado de <em>servidor HTTP</em> (o protocolo através do qual os navegadores da internet "conversam" entre si), mais comumente conhecidos como servidores web.</p>
<p>Graças à popularidade deste tipo de serviço, hoje podemos contar com vários programas que são software livre disponíveis para atender à esta necessidade. Dentre os servidores web mais populares atualmente, se encontram o <a href="https://httpd.apache.org/">Apache</a>, <a href="https://www.lighttpd.net/">LigHTTPD</a> e o relativamente recente <a href="https://nginx.org/en/">NginX</a>. Todos estes realizam bem o trabalho, e cada um deles possuem vantagens e desvantagens, mas neste artigo iremos focar no servidor Apache, que provavelmente é o mais utilizado entre os sites na internet hoje em dia.</p>
<p>O foco deste artigo é na distribuição Raspberry Pi OS, sobre o qual escrevemos <a href="/blog/como_instalar_linux_raspberry_pi/">um tutorial detalhado de instalação anteriormente</a>, mas os mesmos passos se aplicam para distribuições similares como Debian ou Ubuntu Server, que também possuem imagens para o Raspberry Pi.</p>
<p>Primeiramente, instalaremos o pacote do Apache no Raspberry Pi OS com o seguinte comando:</p>
<pre><code>sudo apt-get install apache2
</code></pre>
<p>Após a instalação, o Apache é iniciado automaticamente com configurações de segurança padrões ativadas, mas ainda é possível configurá-lo para poder funcionar da maneira que desejamos. </p>
<p>Por padrão, o Apache servirá todos os conteúdos armazenados no diretório <code>/var/www/</code> para qualquer cliente que solicitá-lo, o que torna lançar uma versão "mínima" do seu site bem fácil. Para isso, crie um arquivo chamado <code>index.html</code> usando o seu editor de texto favorito com o seguinte conteúdo:</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Raspberry Pi!&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Hello World! Eu sou um Raspberry Pi&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Em seguida, mova este <code>index.html</code> para o diretório padrão do Apache:</p>
<pre><code>sudo cp index.html /var/www/
</code></pre>
<p>Finalmente, para confirmar que a página foi configurada corretamente, abra o navegador e acesse o endereço <code>http://localhost/</code></p>
<figure>
    <img src="/static/images/raspberry_pi_apache_server.jpg" alt="página sendo servida corretamente pelo Apache" />
    <figcaption>
    Página sendo servida corretamente pelo Apache.
    </figcaption>
</figure>

<p>Parabéns, você publicou a sua primeira página na web.</p>
<h2>Configurando o acesso público dedicado ao seu Raspberry Pi</h2>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/First_Web_Server.jpg/500px-First_Web_Server.jpg" alt="o primeiro servidor web da história, no CERN" />
    <figcaption>
    Este computador, configurado e instalado no CERN é considerado por muitos como o primeiro Servidor Web da história. Curiosamente, o software que utilizara para o serviço eponimamente se chamava "Web." Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Seu site já se encontra disponível localmente mas, conforme vimos no post anterior, para disponibilizar qualquer serviço do seu Raspberry Pi fora da sua rede local, é preciso configurá-lo para ser <a href="/blog/tornando_seu_raspberry_pi_visivel_internet/">acessível na internet através do Port Forwarding</a>. Quando se trata de um site, porém, obter um domínio e acesso dedicado a ele é bem mais importante. É este domínio que você compartilhará com os outros visitantes para que possam acessar o seu site, e não o seu endereço IP.</p>
<p>Geralmente, para um site pequeno, um subdomínio com DNS gratuito pode ser suficiente para garantir que os usuários encontrem o seu site. Para isso, é possível utilizar o serviço do <a href="https://www.noip.com">No-IP</a> para manter seu domínio apontando para o seu endereço de IP. Você pode criar uma conta gratuita nele e estabelecer o subdomínio em alguns minutos. Após isso, poderá compartilhar o endereço do seu site com todos na Internet!</p>
<h2>Ferramentas para criação de conteúdo no seu site</h2>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Logo_of_Hugo_the_static_website_generator.svg/400px-Logo_of_Hugo_the_static_website_generator.svg.png" alt="Logo do gerador de sites estáticos Hugo" />
    <figcaption>
        Para gerar um site estático (HTML puro) programas como o Hugo ajudam bastante. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Sua página da web está já disponível, mas convenhamos que está bem básica e poderia melhorar um pouco. Para isso, é necessário criar conteúdo para o seu site na forma de mais páginas armazenadas dentro do diretório <code>/var/www/</code>.</p>
<p>Todo o conteúdo da web acessado por via de navegadores é escrito numa linguagem chamada HTML (Hypertext Markup Language) que é a que utilizamos para criar a "mini-página" na seção anterior. Há vários guias que ensinam como aprender esta linguagem na internet, sendo o guia apresentado pelo <a href="https://www.htmldog.com/">HTML Dog</a> uma recomendação pessoal, pois este é bem didático.</p>
<p>Como escrever manualmente cada página em HTML pode ser um pouco maçante, existem algumas ferramentas que automatizam o processo de criação da página, permitindo que você foque na provisão do conteúdo (texto). Estas ferramentas são chamadas de <a href="https://jamstack.org/generators/">geradores de sites estáticos</a>. Talvez a mais famosa delas seja o framework <a href="https://gohugo.io">Hugo</a>, que permite a criação de páginas completas com templates já pré-elaborados. Outro bem conhecido é o <a href="https://jekyllrb.com/">Jekyll</a>, disponibilizado por padrão no Github.</p>
<p>O site do Raspberry Pi Brasil, por exemplo, utiliza um gerador de site estático próprio, escrito na linguagem Python. Se você tiver interesse em utilizá-lo, <a href="https://github.com/raspibrasil/sitegen">acesse-o aqui no Github</a>.</p>
<h2>Considerações e melhorias futuras</h2>
<p>A configuração padrão do Apache pode servir-lhe bem para um servidor ou site pequeno, mas quando quisermos expandir nosso servidor com múltiplos serviços e sites independentes, precisamos ajustar um pouco a configuração. Isso é especialmente desejável no caso do <a href="https://amzn.to/3qlUOqH">Rasbperry Pi 3</a> ou <a href="https://amzn.to/3slgdlW">Raspberry Pi 4</a>, que possuem bastante recursos para hospedarem vários serviços na web. </p>
<p>Nesete caso, é necessário utilizar <a href="https://httpd.apache.org/docs/2.4/vhosts/examples.html">Virtual Hosts</a>, que permitem que múltiplos domínios e sites sejam acessados em paralelo numa mesma máquina física. Felizmente, esta configuração não é difícil, e a documentação do projeto do Apache é bem detalhada.</p>
<p>A utilização de um gerador de site estático pode ser suficiente para o gerenciamento de um blog ou site puramente informacional, mas dependendo do tipo de site que você estiver desenvolvendo, pode não ser suficiente, especialmente se depende do input dos visitantes para funcionar. Neste caso, um site dinâmico, alimentado por uma linguagem de programação backend como Python, PHP, Ruby on Rails ou Node.js é necessária, mas a implementação destas é um pouco mais complicada - e consome mais recursos. Falaremos mais como utilizá-los num post futuro.</p>
<h2>Conclusão</h2>
<p>Hospedar seu site na internet usando o Raspberry Pi com sua conexão caseira não é complicado, e não vai lhe custar nada. </p>
<p>Realizar o <em>self-host</em> do seu site é parecido com ir a algum lugar de bicicleta; personalizável, leve, requer algum esforço, mas certamente irá levá-lo até lá. Para sites pequenos, pode ser a melhor e mais barata solução! Porém, se você precisar de algo muito mais sofisticado, pode não ser a melhor estratégia, especialmente considerando a velocidade das conexões caseiras, e a quantidade de recursos que o seu Raspberry Pi poderá trazer. </p>
<p>No fim do dia, este é mais um ótimo exercício para demonstrar o poder do Software Livre e a capacidade que pode trazer para a sua vida. </p>
<p>O que você achou de hospedar o seu site gratuitamente com o Raspberry Pi? Possui uma forma melhor de gerenciar o domínio ou o conteúdo do seu site? Compartilhe com a gente no <a href="https://qoto.org/raspibrasil">Mastodon!</a></p>
            </div>
        </content>
    </entry>

    <entry>
        <title>Quais os melhores acessórios e periféricos para o Raspbery Pi?</title>
        <link href="https://raspibrasil.github.io/blog/melhores_acessorios_raspberry_pi/" />
        <id>urn:uuid:a7f7b12c-e453-5744-b0b5-b968a54b1264</id>
        <updated>2025-02-04T13:53:35.304207Z</updated>
        <content type="xhtml">
            <div xmlns="http://www.w3.org/1999/xhtml">
                <h1>Quais os melhores acessórios e periféricos para o Raspbery Pi?</h1>
<p>Anteriormente no blog, exploramos os <a href="/blog/como_escolher_seu_raspberry_pi/">vários tipos e modelos do Raspberry Pi</a>  que podem te servir melhor para cada um dos seus objetivos em explorar o mundo dos <em>Single Board Computers</em>. Seja como Desktop ou Servidor, ou para as suas próximas invenções de IoT, existe um modelo de Raspberry Pi ou outro SBC que é perfeito para o seu próximo projeto.</p>
<p>Embora por si próprio um computador completo e inteiramente funcional (afinal, esta é a essência de um SBC), a performance e experiência de utilizar um Raspberry Pi podem ser muito melhoradas com a adição de alguns periféricos que extendem a capacidade e oferecem proteção ao equipamento. Afinal, o dispositivo é um SBC, e não um <em>All-in-one computer</em>... <code>;)</code> Mais capacidade, refrigeração, e algumas vezes proteção física contra os elementos são qualidades desejáveis à qualquer computador, e felizmente você pode oferecê-las ao Raspberry Pi através de alguns acessórios-chave. Neste post, detalharemos alguns dos acessórios que consideramos recomendados, ou algumas vezes indispensáveis para o seu Raspberry Pi. Venha com a gente!</p>
<h2>Case de proteção</h2>
<p>O primeiro acessório recomendado é o <a href="https://amzn.to/3qjZ7Ty">case de proteção</a> do Raspberry Pi. A placa dele é pequena e frágil, podendo ser danificada facilmente por conta de impacto, ou humidade demais. Um case provém uma proteção simples e eficaz ao seu Raspberry Pi, evitando que ele seja danificado acidentalmente.</p>
<p>O <a href="https://amzn.to/3qjZ7Ty">case oficial do Raspberry Pi Foundation</a> torna o dispositivo claramente identificável com suas cores branca e vermelha e a logo estampada na tampa de maneira ainda bem compacta - o dispositivo continua cabendo na palma da mão:</p>
<p><img alt="Comparação do tamanho do Raspberry Pi 4 - ele cabe na palma da mão" src="/static/images/raspi4_palm_size.jpg" /></p>
<p>Existem ainda outros cases não-oficiais que também cabem no Raspberry Pi. Alguns são feitos de <a href="https://amzn.to/39w6Abn">outros materiais como alumínio</a> que além de mais resistentes possuem um efeito de refrigeração passiva, além de outros designs e materiais (como <a href="https://amzn.to/3icPvqV">acrílico</a>) e tamanhos. Todos são eficientes na hora de proteger seu Raspberry Pi.</p>
<h2>Heatsink e refrigeração</h2>
<p>Embora possua baixo consumo de energia e poder computacional, o Raspberry Pi gera uma quantidade considerável de calor durante a utilização e, por conta da ausência de um sistema de arrefecimento, não consegue dispersar o calor tão eficientemente quanto um computador ou servidor tradicional. </p>
<p>Portanto, a depender da temperatura do ambiente (quase sempre verdadeiro para o Brasil) ou da intensidade de uso, um sistema de refrigeração ou <em>heatsink</em> para seu Raspberry Pi pode se tornar necessário.</p>
<p><em>Heatsinks</em> funcionam de forma passiva, sendo simplesmente peças que conduzem rapidamente o calor a fim de carregá-lo para fora do CPU por condução. Alguns cases possuem esta função embutida, especialmente se feitos de materiais metálicos, mas é possível comprar <a href="https://amzn.to/35JxY4x"><em>heatsinks</em> extras</a> de alumínio para serem encaixadas dentro de cases existentes. Para usos de pouca intensidade como um servidor pequeno, um bom <em>heatsink</em> pode ser suficiente.</p>
<p><a href="https://amzn.to/35JxY4x"><img alt="Heatsink com o Raspberry Pi" src="/static/images/raspberry_pi_heatsink.jpg" /></a></p>
<p>Existem também sistemas ativos de refrigeração, que são um ventilador interno que refrigera o dispositivo similarmente aos de um computador tradicional. Alguns deles podem ser <a href="https://amzn.to/2Ly1h3b">montados diretamente na placa do Raspberry Pi</a> através das interfaces PCIe, não sendo necessário a utilização das portas USB, e mantendo o conjunto de forma compacta. </p>
<p><a href="https://amzn.to/2Ly1h3b"><img alt="Resfriamento ativo via PCIe" src="/static/images/raspberry_pi_active_cooling.jpg" /></a></p>
<p>Outros essencialmente são como <a href="https://amzn.to/3srtCZx">ventiladores externos com entrada USB</a>, que você pode colocar por cima dele e ligá-los utilizando uma das saídas USB disponíveis. Um pouco menos organizado, mas ainda assim eficiente.</p>
<p><a href="/static/images/external_fan_usb.jpg"><img alt="ventilador externo USB" src="/static/images/external_fan_usb.jpg" /></a></p>
<p>Particularmente, se você pretende utilizar o seu Raspberry Pi como um desktop, com várias aplicações gráficas e um navegador sendo utilizados simultaneamente, a demanda causa o dispositivo a se sobreaquecer rapidamente, podendo chegar a temperaturas até mesmo danosas ao CPU. Neste caso, o uso de refrigeração ativa é altamente recomendado.</p>
<h2>Fonte de alimentação</h2>
<p>O Raspberry Pi e a maioria dos outros SBCs são designados para funcionar com uma fonte de Smartphone comum, operando a 5V DC e utilizando saídas MicroUSB ou USB-C para alimentação. Porém, a partir do modelo Raspberry Pi 4, o Raspberry Pi Foundation aumentou os requerimentos de alimentação, tornando a maioria das fontes de Smartphone incompatíveis com este modelo.</p>
<p>Como resultado, o Raspberry Pi 4 (e possivelmente os modelos futuros) precisam da <a href="https://amzn.to/3nEGcRG">fonte oficial específica</a> com a amperagem correta para funcionar corretamente. A não utilização desta fonte poderá acarretar na danificação do dispositivo.</p>
<h2>Armazenamento</h2>
<p>O Raspberry Pi precisa pelo menos de um cartão MicroSD para conseguir rodar um sistema operacional. Ao passo que estes se tornaram muito mais populares recentemente graças à popularização dos Smartphones Android, quando se trata de um SBC, são necessárias algumas considerações extras.</p>
<p>Primeiramente, a maior parte dos cartões MicroSDs antigos possui uma velocidade de leitura muito lenta em comparação a um HD ou outra mídia de armazenamento tradicional, o que reflete na performance do Raspberry Pi se utilizados (o computador parece "travar" de vez em quando, quando na verdade está apenas esperando os dados serem copiados).</p>
<p>Portanto, ao invés de abrir a gaveta e pegar o primeiro cartão SD que achar para instalar, é recomendado utilizar um <a href="https://amzn.to/3oNsn4y">cartão MicroSD de alta velocidade</a>, como aqueles que conformam aos <a href="https://en.wikipedia.org/wiki/SD_card#Class">padrões modernos do MicroSD</a>, como UHS-I ou UHS-II.</p>
<p>A segunda consideração é quanto ao tamanho do armazenamento. Enquanto a maior parte dos sistemas operacionais livres como Linux e FreeBSD cabem tranquilamente dentro de 8GB de espaço, pode ser necessário um espaço extra para armazenamento de dados e arquivos conforme o gosto e necessidades do usuário. Nossa recomendação é de pelo menos 32GB de espaço.</p>
<p>Porém, por conta das limitações e durabilidade reduzida dos cartões MicroSD, é melhor reservar ao cartão apenas o espaço necessário para o sistema operacional, e conectar qualquer capacidade adicional externamente, via saídas USB. Dependendo do seu caso de uso, você poderá utilizar desde <a href="https://amzn.to/2KgjXnn">Pendrives comuns USB</a> de alta capacidade ou, quando baixa latência for requisito, <a href="https://amzn.to/3sqMUy6">um HD externo</a> pode ser a única solução.</p>
<h2>As opções são inúmeras</h2>
<p>E para você, qual é o melhor SBC para cada tipo de uso e por quê? Escreva sua resposta para a nossa <a href="https://qoto.org/@raspibrasil">conta no Mastodon</a>!</p>
<p>Abraços e até o nosso próximo post!</p>
<p>Equipe Raspberry Pi Brasil</p>
            </div>
        </content>
    </entry>

    <entry>
        <title>É possível utilizar o seu Raspberry Pi como um computador desktop? Não subestime a sua capacidade!</title>
        <link href="https://raspibrasil.github.io/blog/raspberry_pi_como_desktop/" />
        <id>urn:uuid:b45de4fb-18d1-53e4-aa3d-c3b922964c0e</id>
        <updated>2025-02-04T13:53:35.304207Z</updated>
        <content type="xhtml">
            <div xmlns="http://www.w3.org/1999/xhtml">
                <h1>É possível utilizar o seu Raspberry Pi como um computador desktop? Não subestime a sua capacidade!</h1>
<p>A grande promessa (e charme!) do Raspberry Pi é dele ser um "computadorzinho" portátil e de baixo consumo de energia, disponibilizável em qualquer lugar: você pode trabalhar em seus projetos de software e aprender facilmente com ele, graças à flexibilidade e expansibilidade do <a href="/blog/bem_vindo_ao_raspberrypi_brasil/">Software Livre</a>. A própria <a href="https://raspberrypi,org">Raspberry Pi Foundation</a>, inclusive, considera o projeto como primariamente focado em educação na ciência da computação. Porém, nos últimos anos, os recursos e interfaces disponíveis no Raspberry Pi aumentaram significantemente, expandindo as possibilidades do objetivo original. Seria possível utilizá-lo como um computador comum Desktop?</p>
<p>O <a href="https://amzn.to/3wfUopM">Raspberry Pi 4</a> lançado recentemente possui especificações similares à um desktop ou laptop mediano, e provavelmente foi designado com este objetivo em mente. Alguns o apontam como uma versão High-end do tradicional SBC, e a possível direção a ser seguida com os modelos futuros, podendo até mesmo um dia torná-los equivalentes ou competidores aos tradicionais Desktops. Mas será que a realidade prossegue com essa visão utópica? Neste post, exploraremos as possibilidades sobre utilizar o Raspberry Pi como um computador desktop padrão, e se é possível em 2021 substituí-lo por completo.</p>
<p>Vejamos a seguir.</p>
<h2>Recursos do Raspberry Pi comparado a outros computadores</h2>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/RaspberryPiModelBRev2.by.Philipp.Bohk.jpg/400px-RaspberryPiModelBRev2.by.Philipp.Bohk.jpg" alt="Raspberry Pi Model B de 2012" />
    <figcaption>
        O Raspberry Pi Model B, lançado em 2012 é bem minimalista comparado aos outros SBCs e modelos atuais do Raspberry Pi. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Anteriormente, escrevemos sobre como o propósito de utilização pode afetar a sua decisão sobre <a href="/blog/como_escolher_seu_raspberry_pi/">qual modelo de Raspberry Pi comprar</a>. Peça-chave também nesta decisão é a quantidade de recursos estimados como necessários, e um Desktop tradicionalmente requer mais.</p>
<p>O Raspberry Pi certamente evoluiu desde o seu primeiro lançamento em massa em 2012 com o Modelo B. Na época, a plataforma era bem básica, com um CPU single-core de 700MHz, 512MB de RAM, duas portas USB, saída de vídeo HDMI e de áudio, e apenas conectividade via Ethernet cabeada. Esta era uma configuração comparável aos dos computadores de pelo menos 10 anos antes, mas pôde atender bem os requerimentos da época como um SBC puramente educativo, já que esta utilização não requeria muitos recursos inicialmente.</p>
<p>Com o lançamento do <a href="https://amzn.to/2OiCeTe">modelo 3</a> em 2016, porém, o Raspberry Pi passou a se tornar muito mais próximo da configuração de um computador pessoal de uso geral. Foram adicionados conectividade WiFi, duas portas adicionais de USB, CPU Quad-core e a memória RAM aumentada para 1 GB. Talvez ainda "atrasado" em comparação aos computadores contemporâneos, mas já bem comparável a um laptop padrão em termos de conectividade e usabilidade de periféricos. Sem contar que, para um mero SBC alimentado por fonte USB, estes recursos eram e ainda são impressionantes.</p>
<figure>
    <a href="https://amzn.to/3wfUopM"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/Raspberry_Pi_4_Model_B_-_Side.jpg/400px-Raspberry_Pi_4_Model_B_-_Side.jpg" alt="Raspberry Pi Model 4B de 2019" /></a>
    <figcaption>
        O avançadíssimo Raspberry Pi 4B, com até 8GB de RAM, é comparável a um desktop ou laptop moderno. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Mais recentemente em 2019, o <a href="https://amzn.to/3wfUopM">Raspberry Pi 4</a> fora lançado, essencialmente igualando seu plano entre os demais computadores tradicionais. Com um CPU ARM quad-core de 1.6 GHz e até <em>8 GB de RAM</em>, não há praticamente diferença entre o Raspberry Pi 4 e um computador desktop. Além disso, conectividade Bluetooth e WiFi de 5 GHz também foram introduzidas junto de duas saídas micro-HDMI, tornando-o comparável aos laptops modernos.</p>
<p>Com tantos recursos disponíveis, o Raspberry Pi 4 é o candidato mais próximo para substituir seu Desktop como um computador de uso geral. Porém, ainda é possível "exaurir" estes recursos quando utilizamos software ineficiente e pesado como o sistema operacional Windows, como você já deve ter experienciado várias vezes. Felizmente, existe uma ótima solução para este caso: o <strong>Linux</strong>.</p>
<h2>Maximizando o desktop e minimizando os recursos com o Linux</h2>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/55/WeeChat_2.7-rc1.png/800px-WeeChat_2.7-rc1.png" alt="Sessão de trabalho no Terminal Linux" />
    <figcaption>
        A leveza e flexibilidade do Linux garante que ele seja perfeitamente utilizável até com o mínimo de recursos, como por exemplo usando o terminal e a linha de comando. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>O Linux é uma ótima escolha como o <a href="/blog/como_instalar_linux_raspberry_pi/">sistema operacional do seu Raspberry Pi</a> pela sua leveza, rapidez e flexibilidade. Graças à flexibilidade e modularidade do Linux, é possível torná-lo mais leve ou robusto com base nas suas necessidades, o que o torna perfeito para plataformas modestas como um SBC.</p>
<p>Felizmente, até mesmo um sistema operacional gráfico e com todos recursos modernos como um navegador, suíte de produtividade e outros programas conseguem caber confortavelmente no Raspberry Pi 4 de 4 GB de RAM. A distribuição Raspberry Pi OS, que <a href="/blog/como_instalar_linux_raspberry_pi/">demonstramos a instalação</a> anteriormente, já possui por padrão todos estes programas disponíveis. E ao passo que a utilização dos recursos varia de acordo com o uso, o Raspberry Pi OS consegue mantê-los relativamente estável uma sessão normal de uso.</p>
<figure>
    <img src="/static/images/raspberry_pi_os_screenshot.jpg" alt="Sessão de trabalho no Raspberry Pi OS" />
    <figcaption>
        O Raspberry Pi OS é um sistema operacional moderno que consegue confortavelmente providenciar um ambiente de computação como um tradicional desktop.
    </figcaption>
</figure>

<p>Para testá-lo, por exemplo, colocamos nosso Raspberry Pi 4 numa sessão Linux padrão nossa de uso em laptops: navegador aberto, terminal com várias sessões abertas, gerenciador de arquivos e LibreOffice em uso. Consumo de memória médio: <em>1.3 GB RAM</em>. A experiência também foi bem suave, sem "travar" o sistema e alternando tranquilamente. </p>
<p><strong>Conclusão:</strong> Para uma utilização padrão, sem software muito específico, o <a href="https://amzn.to/3wfUopM">Raspberry Pi 4 de 4GB de memória</a> pode muito bem servir como um Desktop Tradicional.</p>
<h2>Limitações do Raspberry Pi como Desktop</h2>
<p>Nossos testes foram realizados com um usuário médio, "surfando na internet" em mente. Se as suas necessidades de software são muito específicas, como edição de vídeo ou áudio, ou software de engenharia por exemplo, a sua experiência com o Raspberry Pi no Desktop pode ser bem diferente - ou até mesmo precária.</p>
<p>Para aqueles que procuram realizar trabalhos gráficos pesados em grande volume, o Raspberry Pi 4 pode não ser a melhor escolha para substituir o Desktop. Mesmo sendo capaz de reproduzir vídeo em resolução 4K, a GPU do Raspberry Pi pode ser limitada para processamento em massa de vídeos ou imagens de altíssimo tamanho. E mesmo se conseguir através, por exemplo, de Overclock, a temperatura e o consumo de energia aumentam significantemente, sendo necessário um <a href="https://amzn.to/35JxY4x">heatsink</a> ou outro <a href="/blog/melhores_acessorios_raspberry_pi/">acessório de arrefecimento</a> para evitar dano.</p>
<p>Por razão similar, o Raspberry Pi provavelmente não será sua melhor plataforma se você é um Gamer ávido. Além da maioria dos jogos não ser publicado para o Linux (exceto talvez via Steam), requerimentos pesados de gráficos não casam bem com o Raspberry Pi. Dito isto, ainda há algumas exceções notórias: o jogo <a href="https://minetest.org">Minetest</a>, versão software livre do famoso Minecraft, pode ser tanto hospedado quanto jogado no Raspberry Pi 4.</p>
<h2>O teste definitivo: 512 MB e Single-core como um Desktop?</h2>
<p>Além do teste mencionado, nos propusemos a fazer talvez o teste mais profundo envolvendo um Raspberry Pi: usar o Raspberry Pi Model B de 2012 como um computador Desktop. Levaríamos ele ao limite!</p>
<p>Com 512 MB e um CPU single-core rodando em MHz, poucos diriam que este SBC teria alguma chance no mundo do desktop de 2021. Ainda assim, a equipe Raspberry Pi Brasil colocou o desafio a teste, realizando o equivalente a colocar um kart de 50 cilindradas para puxar um trailer de carga.</p>
<p>O veredito? <strong>É possível, mas bem sofrido...</strong></p>
<figure>
    <img src="/static/images/puppy_linux_raspib.jpg" alt="Raspberry Pi Model B rodando Puppy Linux" />
    <figcaption>
        Raspberry Pi Model B (2012) com 512MB RAM rodando Puppy Linux (Raspup).
    </figcaption>
</figure>

<p>Primeiramente, sabíamos que o Raspberry Pi OS seria muito pesado para a tarefa, portanto optamos por uma distribuição Linux leve e especializada em computadores antigos: o <a href="https://puppylinux.org">Puppy Linux</a>. Um dos seus diferenciais é que ele roda diretamente da memória do computador, tornando-se assim muito mais rápido por diminuir o número de vezes que os dados são lidos ou escritos no disco, mas mesmo assim, a experiência é um pouco devagar no Model B de 2012.</p>
<figure>
    <img src="/static/images/puppy_linux_stats.jpg" alt="Sessão do Terminal no Puppy Linux" />
    <figcaption>
        Sessão de terminal do Puppy Linux rodando no Raspberry Pi Model B. Note o consumo baixíssimo de RAM (79 MB!)
    </figcaption>
</figure>

<p>O Puppy Linux carrega e roda o desktop sem problemas, mas é bem devagar por limitações do CPU. É possível abrir alguns aplicativos gráficos e até o navegador, mas o sistema se torna inaceitavelmente lento. Para aplicativos do terminal, o ambiente ainda é utilizável, mas ainda assim não faz o Model B como a melhor escolha como desktop.</p>
<p>Falaremos mais sobre esta distribuição, e como instalá-la no Raspberry Pi num post futuro.</p>
<h2>Conclusão</h2>
<p>O <a href="https://amzn.to/3wfUopM">Raspberry Pi 4</a> pode muito bem ser utilizado como um Desktop moderno quando combinado com um sistema operacional Linux, e para utilização padrão de software. Não será a melhor escolha para gamers ou outros usuários especialistas, mas em geral consegue realizar a tarefa bem.</p>
<p>Com a tendência dos SBCs de aumentar seus recursos daqui para frente, é interessante imaginar o conceito do Raspberry Pi substituindo um computador por inteiro no futuro, ou até mesmo escritórios ou bibliotecas inteiras substituindo seus PCs por Raspberry Pis compactos e baratos. Quem sabe dessa forma pode-se abrir uma Lan House completamente com Software Livre e por uma fração do Preço? Só o tempo dirá!</p>
<hr />
<p>Você já utilizou seu Raspberry Pi como seu computador desktop? Como foi a experiência? Já experimentou outra distribuição além do Raspberry Pi OS? Escreva para a nossa conta no <a href="https://qoto.org/@kzimmermann">Mastodon</a>!</p>
<p>Abraços,</p>
<p><strong>Equipe Raspberry Pi Brasil</strong></p>
            </div>
        </content>
    </entry>

    <entry>
        <title>Evitando problemas de energia com o seu Raspberry Pi</title>
        <link href="https://raspibrasil.github.io/blog/raspberry_pi_problema_energia/" />
        <id>urn:uuid:7fd9c628-259b-51b2-ae65-501edbc250ba</id>
        <updated>2025-02-04T13:53:35.304207Z</updated>
        <content type="xhtml">
            <div xmlns="http://www.w3.org/1999/xhtml">
                <h1>Evitando problemas de energia com o seu Raspberry Pi</h1>
<p>Parte da popularidade do Raspberry Pi na cena dos <a href="/blog/bem_vindo_ao_raspberrypi_brasil/">Single Board Computers</a> certamente provém do fato que seus periféricos e demais interfaces podem ser atendidos por dispositivos de computadores disponíveis comumente nas casas e escritórios atuais. É possível ligá-lo no próprio carregador de celular e conectar periféricos através de USB como um próprio <a href="/blog/raspberry_pi_como_desktop/">Computador Desktop</a>, tornando seu uso muito mais flexível e natural. Porém, mesmo com o Raspberry Pi aderindo a certos padrões, quando se trata de <em>energia</em> é preciso uma atenção especial para escolher uma fonte adequada para que todas as operações de computação sejam executadas de forma adequada sem danificar o equipamento por conta de uma voltagem ou amperagem inadequada. </p>
<p>Embora fontes comuns de celular possam confortavelmente manter os modelos antigos do Raspberry Pi operando sem acessórios, esta situação muda com os modelos mais novos, que consomem mais energia para funcionar, ou quando plugamos periféricos que aumentam o consumo de energia do dispositivo. Ao passo que o consumo de energia é um ponto frequentemente ignorado pela maior parte dos usuários de computadores, no caso do Raspberry Pi a energia disponível é pouca e acontada, o que pode causar alguns problemas inesperados se não tomada a atenção. Neste post, veremos porque alguns problemas de energia podem ocorrer em certos casos com o Raspberry Pi, e como podemos evitar que aconteçam.</p>
<h2>Requerimentos mínimos vs recomendados de energia do Raspberry Pi</h2>
<p>Todos os modelos do Raspberry Pi até a versão 3 foram pensados sob a ótica de compatibilidade com fontes comuns DC utilizadas por smartphones, padronizadas há muito tempo na voltagem 5V. Desta forma, até as velhas fontes daquele tocador de MP3 que você tinha desde 2003 são suficientes para alimentar um Raspberry Pi até o modelo 3 por si só. </p>
<p>A partir do modelo 2, porém, o design do Raspberry começou a incorporar mais capacidade de computação e memória, o que começou a aumentar de forma significante o consumo de energia do design original. A compatibilidade da voltagem com fontes padrão de smartphone fora mantida, porém, e na ausência de qualquer outro periférico os modelos 2 e 3 ainda podem ser mantidos ligados.</p>
<p>A partir do modelo 4, o Raspberry Pi teve um salto significante de recursos, e seus requerimentos de energia se tornaram maiores do que o padrão de 5V das fontes de smartphone comuns. Ele passou a requerer sua própria fonte para operar de maneira correta, surpreendendo muitos acostumados com os modelos anteriores. </p>
<p>A verdade, porém, é que desde o modelo 2, já era de conhecimento que uma fonte comum não poderia garantir <em>todas</em> as operações com o Raspberry Pi, especialmente quando combinadas com periféricos de USB. Prova disto é que a Raspberry Pi Foundation sempre manteve publicado ambos os <a href="https://www.raspberrypi.org/documentation/faqs/#pi-power-specs">requerimentos <em>mínimos</em> e <em>recomendados</em> de energia</a> para cada modelo do Raspberry Pi. Portanto, ao passo que estes modelos acabam funcionando com uma fonte qualquer, isto não significa que eles garantem a operação em todos os casos.</p>
<p>Segundo a documentação da Raspberry Pi Foundation, os modelos do Raspberry Pi em geral possuem os seguintes valores de Voltagem e Amperagem <em>recomendados</em> para operar:</p>
<ul>
<li>Model B: 5V / 1.2A</li>
<li>Model 2 a 3: 5V / 1.8A</li>
<li>Model 4: <strong>5.1V</strong> / 3A.</li>
</ul>
<p>Para comparação, uma fonte de smartphone genérica consegue providenciar 5V a 0.7A apenas, o que é bem abaixo da capacidade recomendada para operações dos modelos 3 e anteriores, e insuficiente para o modelo 4 em diante. Se você trabalha apenas com o Raspberry Pi como um <a href="/blog/acesso_remoto_seguro_raspberrypi_ssh/">servidor via acesso remoto</a>, pode não encontrar problemas com energia numa fonte comum, mas ao plugar algum periférico como um teclado, pode se surpreender se o sistema inteiro sofrer um reboot por conta do pico de consumo de energia.</p>
<h2>Soluções para evitar problemas de energia na operação do Raspberry Pi</h2>
<p>Se você está frustrado com a dificuldade de utilizar periféricos ou a capacidade total do seu Raspberry Pi via por conta de problemas de energia, há algumas soluções diferentes que você pode considerar: trocar a fonte ou a alimentação dos seus periféricos.</p>
<h3>Fontes com maior amperagem</h3>
<p>Ao passo que hoje temos uma vasta disponibilidade de fontes para smartphones com "modo rápido" de carregamento, a verdade é que a maioria ainda segue o mesmo padrão 5V/0.7A decidido há quase duas décadas. Até mesmo as fontes "rápidas" operam em dois modos distintos, sendo o 5B/0.7A o <em>fallback</em> caso o dispositivo não suporte voltagens e amperagens maiores. E enquanto a voltagem da maioria das fontes é padronizada nos 5V, a amperagem pode variar significantemente - para cima ou para baixo.</p>
<p>Ao invés de "catar milho" buscando na gaveta uma fonte de celular apropriada, é muito mais eficiente procurar exatamente por uma fonte que atenda os requerimentos de energia recomendados do seu Raspbery Pi. E felizmente, <a href="https://amzn.to/33KgrrB">fontes que fornecem 5V/1.2A existem</a> e caem como uma luva nos requerimentos da maior parte dos Raspberry Pis descritos acima.</p>
<p>Uma fonte com capacidade de amperagem mais alta é capaz de fornecer corrente elétrica adicional para quando o Raspberry Pi recebe um dispositivo USB conectado, não causando o reboot por falta de energia, e pode garantir o funcionamento no caso do uso de outros periféricos também. A grande vantagem é que mesmo que um pouco acima dos 1.2A recomendados pela documentação oficial, é possível também utilizar fontes com amperagem mais alta, como 1.5A, já que a demanda por corrente elétrica é controlada pelo dispositivo, não a fonte alimentadora. Até mesmo <a href="https://amzn.to/3w79HA5">fontes com 3A de alimentação</a> podem ser utilizadas.</p>
<p>Ao fornecer ao Raspberry Pi a <em>capacidade</em> de corrente mais alta, o "pico de energia" súbito que causa problemas ao conectar USBs é mantido e resguardado, permitindo a continuidade do Raspberry Pi ininterrupta. Por outro lado, também é possível resolver o problema do <em>outro lado</em>: utilizando um hub USB auto-alimentado.</p>
<h3>Dispositivos e Hubs USB com fonte própria</h3>
<figure>
    <a href="https://amzn.to/3fnKP0c">
    <img src="/static/images/powered_usb.jpg" alt="Exemplo de Hub USB com fonte" />
    </a>
    <figcaption>
        Um Hub USB com fonte externa pode suprir energia aos seus periféricos sem drenar o Raspberry Pi.
    </figcaption>
</figure>

<p>É possível também evitar o dreno de energia dos dispositivos periféricos simplesmente alimentando-os de outra maneira que não seja oriunda do Raspberry Pi. Alguns dispositivos, como <a href="https://amzn.to/3tLCA3f">HD externos de mesa</a>, possuem sua própria fonte de alimentação externa para funcionar pois consomem mais energia que uma porta USB convencional pode fornecer. Estes são os HDs recomendados para criar um <a href="/blog/compartilhando_arquivos_nas_raspberrypi/">armazenamento caseiro como um NAS</a>. Plugar o Raspberry Pi neste dispositivo já com fonte própria não causa consumo adicional a ele.</p>
<p>Alternativamente, alguns <a href="https://amzn.to/3fnKP0c">Hubs USB</a> possuem alimentação própria também, funcionando tanto quanto uma forma de carregar dispositivos nele conectados quanto um hub de dados que não consome a energia do host. É possível, por exemplo, conectar o hub à tomada, conectá-lo ao Raspberry Pi e em seguida utilizar deste hub para conectar os demais periféricos, causando "interferência" mínima ao seu Pi.</p>
<h3>Fontes oficiais do Raspberry Pi Foundation</h3>
<figure>
    <a href="https://amzn.to/3ojEJlI">
    <img src="/static/images/fonte_rpi4.jpg" alt="Fonte Oficial do Raspberry Pi 4" />
    </a>
    <figcaption>
        A fonte oficial do Raspberry Pi 4 por enquanto é a única alternativa para alimentar este modelo, que possui requerimentos de Voltagem e Corrente únicos dentro da linha.
    </figcaption>
</figure>

<p>Finalmente, não podemos deixar de frisar que a Raspberry Pi Foundation designou todo o hardware envolvido, incluindo as <em>fontes oficiais</em> que são as recomendadas ao operar o Raspberry Pi.</p>
<p>Segundo a Fundação, estas fontes são designadas para prover exatamente a energia necessária para o funcionamento de cada um dos modelos do Raspberry Pi, além de contarem com cabos resistentes e bem-isolados (a má-construção destes pode acarretar no aumento de resistência no circuito, reduzindo a potência que alcança o dispositivo para começar).</p>
<p>Fontes oficiais e homologadas são vendidas pela própria fundação e estão disponíveis no Brasil também. As <a href="https://amzn.to/3tT4xWW">fontes para os modelos 1 a 3</a>, por exemplo, fornecem energia à 5V 2.5A, sem precisar de um cabo USB extra. E no caso do audacioso <a href="https://amzn.to/3eO35Rp">Raspberry Pi 4</a>, acreditamos que não há alternativa à <a href="https://amzn.to/3wcFLml">fonte oficial do Raspberry Pi Foundation</a> por conta também na mudança da voltagem necessária do dispositivo. A certeza, porém, é que ao utilizá-la, você terá corrente o suficiente para alimentar diversos dispositivos ao mesmo tempo - incluindo as 4 portas USB disponíveis.</p>
<h2>Conclusão</h2>
<p>A <a href="/blog/raspberry_pi_como_desktop/">útilização do Raspberry Pi como um desktop</a> é uma realidade com os modelos mais recentes, mas num mundo <em>low power</em> como este, pode ser necessário um pouco mais de atenção sobre o quanto entra e sai de energia no sistema total.</p>
<p>Embora fácil e rápido, simplesmente plugar seu Pi numa fonte velha de smartphone Android pode não suprir a corrente total necessária para torná-lo operacional em caso de conectar e desconectar múltiplos dispositivos USB, o que o causa dar reboot por falta de energia. </p>
<p>Felizmente o problema pode ser resolvido de algumas formas simples, como utilizando uma fonte com amperagem maior ou um HUB USB com sua própria fonte. Em último caso, podemos utilizar as fontes oficiais desenvolvidas pela Raspberry Pi Foundation - no caso do <a href="https://amzn.to/3eO35Rp">Raspberry Pi 4</a>, por exemplo, é a única solução.</p>
<hr />
<p>Como você faz para evitar problemas de energia com o seu Raspberry Pi? Você usa as fontes oficiais ou alguma outra solução? <a href="https://qoto.org/@raspibrasil">Escreva pra gente no Mastodon!</a></p>
<hr />
<p><strong>Disclaimer:</strong> o Raspberry Pi Brasil não é um órgão oficial da Raspberry Pi Foundation e não possui a documentação oficial referente às especificações de energia e de hardware do Raspberry Pi. Consulte a documentação oficial da <a href="https://raspberrypi.org">Raspberry Pi Foundation</a> no caso de dúvida. O Raspberry Pi Brasil não se responsabiliza em caso de danos oriundos da utilização de qualquer informação deste site.</p>
            </div>
        </content>
    </entry>

    <entry>
        <title> Tornando o seu Raspberry Pi visível na Internet</title>
        <link href="https://raspibrasil.github.io/blog/tornando_seu_raspberry_pi_visivel_internet/" />
        <id>urn:uuid:e2e33c03-fb86-5954-a216-1c82bb01f79b</id>
        <updated>2025-02-04T13:53:35.304207Z</updated>
        <content type="xhtml">
            <div xmlns="http://www.w3.org/1999/xhtml">
                <h1>Tornando o seu Raspberry Pi visível na Internet</h1>
<p>Utilizar o Raspberry Pi como um servidor caseiro é uma forma interessante de se estudar e aprender a gerenciar serviços do <a href="/blog/como_instalar_linux_raspberry_pi/">Linux</a> enquanto também desfrutamos dos benefícios que estes serviços nos providenciam. Por exemplo, anteriormente vimos como facilmente podemos <a href="/blog/compartilhando_arquivos_nas_raspberrypi/">compartilhar arquivos entre nossos dispositivos de casa</a> utilizando um programa chamado Samba no Raspberry Pi. Após aprender a instalá-lo e configurá-lo, pudemos também nos beneficiar da conveniência de conectar qualquer dispositivo em casa, independente do sistema operacional.</p>
<p>Nestes exemplos, porém, ainda possuimos uma limitação: não é possível acessar o sistema <em>fora da nossa rede local</em>. No momento que saímos do alcance da nossa rede Wifi, já não seria mais possível acessar o nosso Raspberry Pi e nem os serviços que tão carinhosamente implementamos nele. Felizmente, ainda é possível cobrir esta diferença com soluções de Software. É isso mesmo, não é preciso gastar dinheiro comprando algum equipamento especial ou contratando um plano especial com o seu provedor de internet para realizar isto. Neste post, mostraremos um método para <strong>acessar seu Raspberry Pi da Internet</strong>, conhecido como <em>Port Forwarding</em>.</p>
<h2>Como funciona o <em>Port Forwarding</em></h2>
<p>A técnica chamada de <a href="https://en.wikipedia.org/wiki/Port_forwarding">Port Forwarding</a> é relativamente simples, e pode ser implementada em virtualmente qualquer roteador e switch residencial moderno. Ela funciona da seguinte forma:</p>
<p>Quando você conecta um dispositivo à internet na sua casa (wifi ou não), está essencialmente conectando-o ao seu roteador <em>primeiro</em> para que este roteador se encarregue de gerenciar a conexão do dispositivo com os serviços externos da internet. É o seu roteador que está em contato direto com a internet, e realiza o trabalho de gerenciar as conexões que entram e saem da sua rede através de um processo chamado <a href="https://en.wikipedia.org/wiki/Network_address_translation">Network Address Translation, ou NAT</a>. </p>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/NAPT-en.svg/1200px-NAPT-en.svg.png" alt="explicação do NAT e as redes internas" />
    <figcaption>
        O roteador (NAPT) atua como interface entre o "mundo" interno da rede local (10.1.1.x) e o resto da internet. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Como consequência do NAT, O seu dispositivo nunca "enxerga" a internet diretamente, e conversamente dispositivos da internet não podem acessá-lo diretamente - o que leva alguns a erroneamente acharem que o roteador funciona como um firewall. É possível, porém, abrir "exceções" no NAT do seu roteador, de forma que ele entenda que quaisquer conexões entre um certo dispositivo e a internet devam ser realizados diretamente, efetivamente "expondo" o dispositivo. Este é o processo chamado de port forwarding.</p>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/NAT_Concept-en.svg/1200px-NAT_Concept-en.svg.png" alt="Explicando o Port Forwarding via roteador" />
    <figcaption>
        Através do Port Forwarding, o Roteador expõe transparentemente o dispositivo interno com a comunicação externa, fazendo-o aparentar estar diretamente conectado. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Felizmente, quase qualquer roteador residencial ou de um provedor de internet oferece esta funcionalidade, sendo apenas necessário configurá-la corretamente. O procedimento geral consistem em:</p>
<ol>
<li>Identificar o endereço IP interno do Raspberry Pi.</li>
<li>Configurar o roteador para permitir tráfego diretamente ao endereço do Raspberry Pi</li>
<li>Opcional: associar um nome de domínio ao endereço IP externo do Raspberry Pi para facilitar o acesso (recomendado)</li>
</ol>
<p>Exploraremos cada um destes passos a seguir.</p>
<h2>Passo 1: Identificando o endereço IP interno do Raspberry Pi</h2>
<p>Para abrir esta exceção no roteador, precisamos especificar qual dispositivo deverá ser conectado diretamente à internet. Para isso, utilizaremos o endereço IP interno do Raspberry Pi na rede caseira.</p>
<p>Para obter o endereço IP do Raspberry Pi no Linux, execute o seguinte comando no terminal:</p>
<pre><code>ip addr
</code></pre>
<p>Este comando irá retornar um conteúdo parecido com o seguinte:</p>
<pre><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
   valid_lft forever preferred_lft forever
inet6 ::1/128 scope host
   valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000
link/ether dd:b6:71:b8:2f:81 brd ff:ff:ff:ff:ff:ff
inet 192.168.10.7/24 brd 192.168.10.255 scope global noprefixroute eth0
   valid_lft forever preferred_lft forever
inet6 fe80::80eb:b427:3f1a:fc92/64 scope link
   valid_lft forever preferred_lft forever
...
</code></pre>
<p>Procure pela linha que contém a palavra <code>inet</code>; o número associado à ela é o seu IP interno, geralmente no formato <code>192.168.XX.YY</code>.</p>
<pre><code>...
inet 192.168.10.7/24 brd 192.168.10.255 scope global noprefixroute eth0
...
</code></pre>
<p>Se a sua distribuição Linux não oferece o comando <code>ip</code> (é o caso de distribuições minimalistas ou especialistas), é também possível encontrá-lo utilizando o comando <code>ifconfig</code>:</p>
<pre><code>$ ifconfig
eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
    inet 192.168.10.7  netmask 255.255.255.0  broadcast 192.168.10.255
    inet6 fe80::80eb:b427:3f1a:fc92  prefixlen 64  scopeid 0x20&lt;link&gt;
...
</code></pre>
<p>Note que dependendo do seu modelo do Raspberry Pi, você poderá ter dois endereços distintos, um para a interface Wifi e outro para a interface cabeada. Este é o caso dos modelos mais novos, como o <a href="https://amzn.to/3rfzseM">Raspberry Pi 3</a> e o poderoso <a href="https://amzn.to/3clMHXi">Raspberry Pi 4</a>. </p>
<p>Geralmente, preferimos utilizar aqui a interface cabeada para garantir a constância e a velocidade da conexão com a internet, mas não sendo possível (por exemplo, distância ou acesso ao roteador), também é perfeitamente possível fazer port forwarding via wifi. Se o seu Raspberry Pi não possuir WiFi integrado (como o modelo 1), é possível utilizar um <a href="https://amzn.to/3rizqml">adaptador WiFi de USB</a>.</p>
<p>Armado com o IP para ser exposto, vamos configurar o roteador.</p>
<h2>Passo 2: Expondo o Raspberry Pi diretamente à internet via Roteador</h2>
<p>Por conta da grande diversidade de modelos e interfaces de roteadores disponíveis, infelizmente não podemos escrever um único guia definitivo para esta configuração. Portanto, descrevemos aqui os passos principais que você deve seguir.</p>
<p>Navegue até o endereço do seu roteador, geralmente descrito como <code>AAA.BBB.CCC.1</code> na maioria das redes caseiras. Faça o login como administrador - se você não sabe quais são as credenciais, poderá achá-las escritas atrás do seu roteador (esta também é uma <em>ótima</em> hora para trocá-las e evitar um <a href="https://security.stackexchange.com/questions/77112/danger-of-default-router-password">incidente de segurança futuro</a>).</p>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Modem_DirecTV_4G_LTE_Colombia_(trasera).jpg/607px-Modem_DirecTV_4G_LTE_Colombia_(trasera).jpg" alt="Fundo de um roteador onde senhas padrões estão expostas" />
    <figcaption>
        Quase todos os dispositivos de rede residenciais possuem suas credenciais de fábrica expostas no verso em algum lugar. Os que não possuem podem ser achados com uma simples busca. Troque as suas para evitar problemas. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Uma vez autenticado, procure por configuração de "Port Forwarding" ou "Port filtering" sob as configurações de LAN. Nestas configurações, informe o endereço IP que você obteve no passo anterior como uma exceção ao no filtro de NAT do roteador e salve as configurações. O roteador será reiniciado.</p>
<p>Neste ponto, seu Raspberry Pi estará visível a partir da Internet. Para testá-lo, você precisará descobrir primeiro qual é o seu IP externo (acessível da internet), o que pode ser feito acessando <a href="https://duckduckgo.com/?q=ip">este link</a>, ou este comando a partir do seu Raspberry Pi:</p>
<pre><code>curl https://lite.duckduckgo.com/lite/?q=ip | grep "Your IP address"
</code></pre>
<p>Seu endereço IP público é o número informado. Munido desta informação, execute os seguintes comandos no seu Raspberry Pi para iniciar um servidor web de testes:</p>
<pre><code>cd /tmp
python -m http.server 8090
</code></pre>
<p>A partir de outro computador ou seu celular, navegue para <code>http://SEUENDEREÇOIP:8090</code>. Se você conseguir acessar este endereço, parabéns: <strong>seu Raspberry Pi está visível e acessível da Internet.</strong> <code>;)</code></p>
<h2>Passo 3: Adquirindo um domínio gratuito para o seu Raspberry Pi</h2>
<p>Tecnicamente, seu Raspberry Pi está pronto para ser acessado externamente e não necessita de nenhuma outra configuração. Porém, memorizar um endereço IP pode ser um pouco complicado, e ter um nome de domínio (ex: <code>meuraspberrypi.net</code>) facilita bastante, e é recomendado - especialmente se você planeja hospedar vários serviços.</p>
<p>Ao contrário do que se aparenta, é possível também obter um nome de domínio de forma <em>completamente gratuita</em> de maneira similar aos blogs e sites gratuito em plataforma como o Wordpress ou Blogspot. Tratam-se de serviços gratuitos de <a href="https://en.wikipedia.org/wiki/DNS">DNS</a> dinâmico, que farão o redirecionamento gratuito para o endereço IP do seu Raspberry Pi.</p>
<p>Através do provedor <a href="https://freedns.afraid.org/">FreeDNS</a>, por exemplo, você poderá registrar um sub-domínio sob o domínio <code>.afraid.org</code> apontando para o seu Raspberry Pi, tornando-o muito mais memorável. Outros provedores incluem <a href="https://www.noip.com/">No-IP</a> e diversos outros. Com tanta facilidade e custo zero, não há razão para não ter um domínio para o seu Raspberry Pi. Falaremos mais sobre como utilizar este serviço num post futuro.</p>
<h2>Considerações extras de segurança</h2>
<p>Colocar o seu Raspberry Pi disponível na Internet é divertido e engajante, mas não é um completo mar de rosas. Há muitos outros pontos sobre os quais devemos tomar consideração, e entre eles o mais importante é a <strong>segurança do seu sistema</strong>.</p>
<p>Qualquer computador exposto diretamente à internet se torna publicamente acessível a qualquer outro dispositivo no globo sem o filtro protetor do NAT, incluindo usuários maliciosos que podem querer atacar ou explorar o seu sistema. Mesmo que você não tenha muito o que "perder" com um simples Raspberry Pi, lembre-se que ele ainda se encontra anexado à sua rede interna, possibilitando o acesso de um usuário malicioso aos seus outros dispositivos se hackeado.</p>
<p>Segurança da computação é um assunto complexo, e com muitos pontos para serem considerados, então falaremos sobre isto com mais detalhes em outro post futuro. Você pode começar a assegurar seu Raspberry Pi considerando os seguintes pontos:</p>
<ul>
<li>Mantendo o seu sistema operacional <strong>atualizado</strong>, com os <em>patches</em> de segurança instalados o mais cedo possível. Manter o software do seu computador atualizado é a forma leiga mais eficiente de evitar problemas de segurança.</li>
<li>Instalando e configurando um <strong>Firewall</strong> para permitir que apenas as portas onde os serviços estão atuando sejam abertas. O programa <a href="https://code.launchpad.net/ufw">ufw</a> é um firewall popular no Linux.</li>
<li>Não habilitando mais serviços além daqueles que você necessita. Quanto mais serviços existem, maior a sua <a href="https://en.wikipedia.org/wiki/Attack_surface">superfície de ataque</a> pela qual você pode ser comprometido. Não usa alguma coisa? Desabilite-a. <strong>Reduza os riscos para o mínimo necessário.</strong></li>
</ul>
<h2>Conclusão</h2>
<p>Colocar os serviços do seu Raspberry Pi na internet, sejam eles um servidor web para o seu site, IRC ou XMPP, não é um processo complicado, e pode lhe ajudar a estabelecer sua presença online de forma simples, rápida e - mais importante - gratuita.</p>
<p>O <em>port forwarding</em> é um truque simples que disponibiliza seu computador na internet rapidamente, e quando combinado com um domínio gratuito, se torna uma forma poderosa de publicar sites e serviços na internet. Ainda assim, precisamos tomar alguns cuidados extras ao disponibilizar um servidor público numa rede onde não temos controle sobre quem a acessa - em outras palavras, a Internet.</p>
<p>Para explicações detalhadas de como habilitar Port Forwarding para modelos específicos de roteadores, existem alguns guias que explicam em detalhes o processo para vários roteadores caseiros disponíveis no mercado. O site <a href="https://portforward.com/">PortForward.com</a>, por examplo, possui explicações detalhadas que poderão lhe assistir no processo, se o seu roteador se encontra em sua lista. Outro recurso é o guia do <a href="https://www.noip.com/support/knowledgebase/general-port-forwarding-guide/">No-IP</a>.</p>
<p>Divirta-se colocando o seu novo site na internet a partir do seu Raspberry Pi!</p>
<hr />
<p>O que você acha do método do <em>Port Forwarding</em> como uma maneira de disponibilizar seu Raspberry Pi na Internet? Conhece algum outro método de realizá-lo? O que faria para assegurar o seu Raspberry Pi uma vez publicado? Escreva para nossa conta no <a href="https://qoto.org/@raspibrasil">Mastodon!</a></p>
            </div>
        </content>
    </entry>

    <entry>
        <title>Usando Linux no seu Smartphone com o Termux</title>
        <link href="https://raspibrasil.github.io/blog/usando_linux_smartphone_termux/" />
        <id>urn:uuid:20e166b9-cf64-5d94-9a32-ed8be5de0f2c</id>
        <updated>2025-02-04T13:53:35.304207Z</updated>
        <content type="xhtml">
            <div xmlns="http://www.w3.org/1999/xhtml">
                <h1>Usando Linux no seu Smartphone com o Termux</h1>
<p>Aqui no Raspberry Pi Brasil temos o lema que não há nada que não possa ser resolvido através de um <a href="/blog/bem_vindo_ao_raspberrypi_brasil/">Single-board Computer (SBC)</a> e o Software Livre. Embora os SBCs sejam computadores versáteis e flexíveis, variando desde os simples modelos como o <a href="https://amzn.to/3qlUOqH">Raspberry Pi 3</a> até os poderosos <a href="https://amzn.to/3slgdlW">Raspberry Pi 4B</a> que podem até <a href="/blog/raspberry_pi_como_desktop/">ser utilizados como Desktops</a>, algumas vezes precisamos de um fator de mobilidade em nossa computação moderna.</p>
<p>Quando se trata de mobilidade, praticamente não há quem ganhe dos nossos smartphones, em termos de conectividade e vida útil da bateria. Infelizmente, ao os utilizarmos, ficamos restritos aos Apps e suas plataformas, sendo difícil ter o poder que o Linux e o Software Livre nos providencia nestes dispositivos. Isto é, até agora. Neste post, mostramos como é possível ter acesso a um ambiente Linux completo no seu smartphone Android através de um aplicativo poderoso chamado <strong>Termux</strong> para que você possa levar sua computação com você e até <a href="/blog/tornando_seu_raspberry_pi_visivel_internet/">acessar seu Raspberry Pi fora de casa</a> através do seu smartphone.</p>
<p>Vamos em frente.</p>
<h2>O que é o Termux?</h2>
<p>O <a href="https://termux.com/">Termux</a> é um aplicativo para Android que emula um ambiente Linux completo dentro do Android. Diferente de outros "aplicativos Linux" disponíveis, não só o Termux emula um <em>shell</em> como o bash ou SSH, ele oferece um ambiente <strong>completo</strong> que disponibiliza várias utilidades do Linux e até um gerenciador de pacotes que permite você a instalar software adicional ao ambiente. Tamanha é a plenitude do aplicativo que os desenvolvedores inclusive o consideram uma distribuição Linux independente.</p>
<p>Nos bastidores, o Termux faz uso do fato que o Android também é baseado no Linux para utilizar um mechanismo chamado <a href="https://en.wikipedia.org/wiki/Chroot"><em>chroot</em></a> que isola o seu próprio ambiente do resto do Android, essencialmente tornando-se um "Linux dentro do Linux."</p>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Diagramme_ArchiEmulateur.png/400px-Diagramme_ArchiEmulateur.png" alt="Descrição de funcionamento do Chroot" />
    <figcaption>
        O chroot cria um ambiente virtual isolado que pode ser operado e modificado independente do ambiente "pai." Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Uma vez dentro do ambiente <em>chroot</em>, o Termux opera seu próprio mundo, trazendo funcionalidades nativas do Linux à interface Android. O Termux traz o shell bash nativamente e pronto para ser utilizado, e também o seu próprio mecanismo de gerenciamento de pacotes chamado <code>pkg</code>, que funciona de maneira similar ao <code>apt</code> do <a href="/blog/como_instalar_linux_raspberry_pi/">Raspberry Pi OS</a> e do Debian. E a melhor notícia de todas: <em>não requer "rooting" para funcionar.</em> Virtualmente qualquer versão recente do Android pode rodá-lo.</p>
<p>A função do <em>chroot</em> de "pegar emprestado" a fundação Linux que o Android usa pode ser a razão pela qual o Termux infelizmente não está disponível para o iPhone, o que é realmente uma pena dado o poder do aplicativo.</p>
<h2>Instalando e utilizando o Termux</h2>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/d/d8/Screenshot_from_termux.png" alt="Screenshot do Termux no Android" />
    <figcaption>
        O Termux oferece um ambiente Linux completo para o seu celular Android. Crédito: Wikimedia.org
    </figcaption>
</figure>

<p>Você pode baixar o Termux diretamente do Google Play, mas seus próprios desenvolvedores recomendam a utilização da versão disponível no <a href="https://f-droid.org/en/packages/com.termux/">F-Droid</a> (a alternativa Free Software ao Google Play) por conta desta receber as atualizações mais frequentemente.</p>
<p>Na sua primeira execução, o Termux lembra a linha de comando do Linux, disponibilizando algumas informações de onde encontrar ajuda e o <code>bash</code> para você inserir comandos. Embora já completamente utilizável a partir deste ponto, podemos melhorá-lo com alguns passos a mais.</p>
<p>Além do aplicativo em si, o Termux mantém seu próprio ambiente separado, portanto primeiramente é necessário <em>atualizá-lo</em> também para sua versão mais recente. Podemos fazer isso com o comando <code>pkg</code>:</p>
<pre><code>pkg upgrade
</code></pre>
<p>O <code>pkg</code> no Termux é do que um <em>wrapper</em> para o <code>apt</code> do Debian que o aponta para o melhor repositório do Termux disponível. Por conta do mechanismo <em>chroot</em> descrito acima, você já está rodando como usuário <code>root</code> e portanto o comando <code>sudo</code> não é necessário.</p>
<p>Se houverem atualizações disponíveis, instale-as digitando <code>y</code> e ao final do processo seu ambiente Linux estará atualizado.</p>
<p>Podemos usar o <code>pkg</code> para instalar software adicional dentro do Termux. Recomendamos instalar os seguintes pacotes para obter um ambiente Linux versátil e produtivo:</p>
<ul>
<li>tmux: um <a href="https://en.wikipedia.org/wiki/Tmux">terminal multiplexer</a> que permite você rodar várias "janelas" de terminais numa única sessão.</li>
<li>mc: gerenciador de arquivos do terminal com dois painéis. Um pouco esquisito de usar no começo, mas excelente uma vez que acostumado.</li>
<li>elinks: um navegador web apenas de texto, ótimo para consultar documentação no terminal.</li>
<li>um editor de texto, nosso favorito sendo o <a href="https://vim.org">vim</a>.</li>
</ul>
<p>O comando para instalá-los é:</p>
<pre><code>pkg install tmux mc elinks vim
</code></pre>
<p>Finalmente, você pode conceder permissões adicionais para o ambiente do Termux acessar o resto do armazenamento interno do seu celular ou até mesmo o cartão MicroSD. Isto possibilitará acessar fotos e outros arquivos de outros aplicativos de maneira bem conveniente, sem precisar utilizar a função de "compartilhar" do Android. Para isso, utilize o comando:</p>
<pre><code>termux-setup-storage
</code></pre>
<p>O Android perguntará se você quer conceder acesso ao armazenamento. Aperte "sim" e você poderá acessar o resto do seu smartphone no diretório <code>~/storage/</code>, onde <code>~/storage/shared</code> é o seu armazenamento interno e <code>~/storage/external-1</code> é o seu cartão MicroSD.</p>
<p>Agora você pode se sentir em casa usando Linux completamente do seu próprio celular!</p>
<h2>Acessando seu Raspberry Pi do seu celular</h2>
<p>Você já tem o computador móvel (smartphone), acesso à Internet (conexão 4G) e um sistema operacional familiar (Linux no Termux). Será possível conectar remotamente ao seu Raspberry Pi agora?</p>
<p>A resposta é um ressonante <strong>sim</strong>: da mesma forma que de um computador desktop remoto.</p>
<p>Providenciado que você tenha configurado seu Raspberry Pi para <a href="/blog/tornando_seu_raspberry_pi_visivel_internet/">ser visível na Internet</a> ou acessível <a href="/blog/acesso_remoto_tor/">via rede Tor</a>, basta apenas você configurar o seu ambiente no Termux.</p>
<p>Primeiro, instale o SSH no termux:</p>
<pre><code>pkg install ssh
</code></pre>
<p>Crie o arquivo de configuração <code>.ssh/config</code> e gere suas chaves SSH conforme descrito <a href="/blog/acesso_remoto_seguro_raspberrypi_ssh/">em nosso post anterior</a>. Seu serviço agora pode ser acessado via <code>ssh meuservico</code></p>
<p>Se você acessa o Raspberry Pi apenas via Tor, os passos seguintes são necessários. Instale o Tor:</p>
<pre><code>pkg install tor
</code></pre>
<p>Você precisa iniciar o Tor, mas o Termux não possui uma infraestrutura para gerenciar serviços (systemd, openrc, etc) tal como numa distribuição desktop. Você ainda pode iniciá-lo desta forma:</p>
<pre><code>tor &amp;&gt; /dev/null &amp;
</code></pre>
<p>Este comando irá iniciar o tor no <em>background</em> e omitir qualquer output dele, tornando-o silencioso e transparente. Uma vez iniciado, você poderá acessá-lo via <code>torsocks ssh meuservico</code></p>
<h2>Levando o Termux para o próximo nível</h2>
<figure>
    <img src="/static/images/mobile_accessories.jpg" alt="acessórios para seu smartphone" />
    <figcaption>
        Será que podemos tornar um smartphone num computador? De certa forma, sim!
    </figcaption>
</figure>

<p>Você agora tem em mãos agora um ambiente Linux completo que pode acessar seu Raspberry Pi. Seu smartphone é literalmente um computador Linux!</p>
<p>Ainda assim, existem algumas limitações de hardware entre o seu smartphone e um computador laptop ou desktop completo, principalmente na interface de input (digitar comandos do Linux numa tela de toque é cruel), e no tamanho de sua tela. Ao passo que estes problemas não podem ser resolvidos apenas por software, existem algumas adições simples que podem melhorar muito a experiência.</p>
<p>A adição de um teclado externo é uma dádiva para quem está digitando comandos apenas numa tela de toque, e altamente recomendado para qualquer um que está trabalhando seriamente através do Termux. Alguns modelos de <a href="https://amzn.to/3avZLHX">teclados bluetooth sem conector</a>, que se conectam-se com os dispositivos apenas via handshake, são portáteis e ideais para "levar o trabalho com você." 
Alternativamente, adaptadores de USB-OTG <a href="https://amzn.to/32FpM3f">para MicroUSB</a> ou <a href="https://amzn.to/2QRdty7">USB-C</a> podem ser utilizados para conectar qualquer teclado USB diretamente no seu smartphone, tornando-se perfeito para usar em escritórios, etc. Você pode inclusive pode conectar um <a href="https://amzn.to/3vbBwXD">hub USB</a> e assim utilizar ambos o teclado e o mouse (!!!) no Termux.</p>
<figure>
    <a href="https://amzn.to/2QnI070"><img src="https://images-na.ssl-images-amazon.com/images/I/51vhLMusFML._AC_SL1200_.jpg" alt="acessórios para seu smartphone" /></a>
    <figcaption>
        Adaptadores USB podem ser utilizados para conectar periféricos de desktops no seu smartphone.
    </figcaption>
</figure>

<p>No caso da tela, é um pouco mais complicado. <a href="https://amzn.to/2Qgta2g">Adaptadores de USB-C para HDMI</a> existem, mas são raros os modelos de smartphone que realmente podem utilizá-los. Como este suporte não é dependente da versão do Android e sim do hardware do dispositivo, você precisa saber se o modelo suporta o protocolo <a href="https://en.wikipedia.org/wiki/Mobile_High-Definition_Link">Mobile High-Definition Link</a> (MHL), que é utilizado com este acessório. Modelos como o <a href="https://amzn.to/32ByWOa">Huawei Mate 30</a> ou o <a href="https://amzn.to/3sI8soM">Samsung Galaxy S9</a>, por exemplo, funcionam com este adaptador.</p>
<p>A alternativa simples é utilizar um dispositivo de <em>casting</em>, como o famoso <a href="https://amzn.to/3tNF428">Chromecast</a>, que transfere a imagem à tela HDMI via WiFi. Novamente esta não é uma solução perfeita por conta da utilização da banda do seu roteador wifi e algumas redes corporativas que não permitem comunicação multicast, mas pode auxiliar a experiência. Se nem isso é possível, um <a href="https://amzn.to/3gxd6Uu">stand de smartphone</a> simples pode ser o mínimo.</p>
<h2>Limitações do Termux</h2>
<p>Como nem tudo são flores, nem no mundo do Software Livre, temos que reconhecer as limitações do Termux em comparação ao Linux instalado no desktop.</p>
<p>A maior limitação do Termux como um aplicativo é sua dependência sobre o Android. Parte por conta do <em>chroot</em> do Linux, é impossível utilizá-lo no iPhone ou outras plataformas, o que é uma grande pena para usuários que gostam dos produtos da Apple.</p>
<p>Em seguida, há algumas diferenças entre a implementação do Termux e o Linux propriamente dito que podem entrar em conflito com alguns programas. Por exemplo, como não há um sistema <code>init</code> para gerenciar serviços, coisas que devem rodar no background devem ser iniciadas conforme o exemplo com Tor acima. A hierarquia do sistema de arquivos também é diferente, e certas localizações são mascaradas por links ou completamente removidas como <code>/usr/local</code>. Isto pode causar algumas surpresas operacionais.</p>
<p>Finalmente, o Termux sem "rooting" do dispositivo não possui permissões para certos acessos e operações no sistema Android, mesmo se você é usuário root dentro dele. Alguns programas disponíveis no Termux irão avisar desta limitação, outros não poderão nem ser executados sem este acesso. A maioria desta última classe, porém, está disponível num repositório separado.</p>
<p>Mesmo com tudo isso considerado, o Termux é um ótimo aplicativo para quem gostaria de trabalhar com o Linux fora de casa e em locais onde trazer o computador não é prático. Combinado com os acessórios indicados acima, é possível construir uma "estação de trabalho" portátil, que pode inclusive acessar seus recursos de casa remotamente. </p>
<p>O Raspberry Pi Brasil altamente recomenda o Termux para quem precisa usar o Linux fora de casa.</p>
<hr />
<p>Você já conhecia o Termux antes? Como faz para acessar seu Raspberry Pi do Celular? Compartilhe com a gente no <a href="https://qoto.org/@raspibrasil">Mastodon!</a></p>
            </div>
        </content>
    </entry>

</feed>
