#!/usr/bin/env python3
#
# An Atom feed generator for a static page blog.
#
# Why use this after many, many others have already been done?
# Because when you reinvent the wheel, you learn more about the wheel.
# Also, it's a good practice for myself.
#
# Besides the Python standard library, this requires the markdown module.
#
# Licensed under the terms and conditions of the GNU GPL v3.
#

import os
import sys
import uuid
from datetime import datetime
from markdown import markdown

# --- SETTINGS --- 
# Change this to your site's domain (no http, etc):
# Example: DOMAIN = "tilde.town/~kzimmermann/"
DOMAIN = ""

# change this to where you'd like to save the final feed file
PUB_DIR = "./"

# --- /SETTINGS --- 

SITE_ROOT = "https://" + DOMAIN
# The following are bits and pieces that compose the final feed:
template_body = '''<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
    <title>kzimmermann's articles</title>
    <link href="%s/articles/atom.xml" rel="self" />
    <link href="%s/articles/" />
    <id>urn:uuid:%s</id>
    <updated>%sZ</updated>
    <author>
        <name>Klaus J Zimmermann - @kzimmermann@fosstodon.org</name>
    </author>
    %s
</feed>
''' 

template_entries = '''
    <entry>
        <title>%s</title>
        <link href="https://tilde.town/~kzimmermann/articles/%s" />
        <id>urn:uuid:%s</id>
        <updated>%sZ</updated>
        <content type="xhtml">
            <div xmlns="http://www.w3.org/1999/xhtml">
                %s
            </div>
        </content>
    </entry>
'''

def create_entry(postname):
    '''
    Creates an <entry> element for the feed using a .md post file
    '''
    with open(postname, 'r') as post:
        raw_post = post.read()

    # Use the first line (minus the two first characters) as the title
    title = raw_post.split('\n')[0][2:]
    link = postname.replace(".md", ".html")

    # I'm not sure we need this, so let's make a random one...
    id = str(uuid.uuid4())

    # Getting the last updated time requires some work...
    last_mod = datetime.fromtimestamp(os.path.getmtime(postname))
    updated = datetime.isoformat(last_mod) # this is the one we'll use.
    
    content = markdown(raw_post)

    # Fill in the blanks
    entry = template_entries % (title, link, id, updated, content)
    return entry


def buildfeed(entries):
    '''
    Once all entries are done (generated by create_entry), this builds the 
    rest of the feed file.
    '''
    id = uuid.uuid5(uuid.NAMESPACE_DNS, DOMAIN)
    pubdate = datetime.isoformat(datetime.utcnow())
    return template_body % (SITE_ROOT, SITE_ROOT, id, pubdate, entries) 


if __name__ == "__main__":
    if len(sys.argv) == 1:
        print("Pass as many .md files you need to add to the feed.")
        sys.exit(1)

    entries = "" # will hold our data soon.

    for post in sys.argv:
        if post[-3:] != ".md":
            continue
        else:
            entries += create_entry(post)

    with open(PUB_DIR + "atom.xml", "w") as pubfile:
        pubfile.write(buildfeed(entries))
